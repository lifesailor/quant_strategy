
CSpos=0
CSpostest=0.35
CSNUM=0.35
CSNUM2=0.5
CSNUM3=0.5  #for EMCA with NA's

create.calendar(name='MyCalendar', weekdays=c('sunday', 'saturday'))

perfdate11=add.bizdays(today(),-6,'MyCalendar')
perfdate1="2017-12-30"
perfdate2="2015-12-30"
perfdate3="2013-12-30"
perfdate4="1990-12-30"
#perfdate4="2006-12-30"

RAWlag=function(POS,Ret){
  Ret=Ret[rownames(POS),colnames(POS)]
  Strategy=as.data.frame(rowSums(Ret[3:nrow(Ret),]*POS[1:(nrow(POS)-2),],na.rm=TRUE))
}

RAW=function(POS,Ret){
  Ret=Ret[rownames(POS),colnames(POS)]
  Strategy=as.data.frame(rowSums(Ret[2:nrow(Ret),]*POS[1:(nrow(POS)-1),],na.rm=TRUE))
}

findwgt=function(data,date,wgt){

  sdobs=130
  sdobs1=130
  data1=data
  ###
  # if("RU"%in%colnames(data)){ data1[,"RU"]=data[,"RU"]*1.5}
  #
  # if("BR"%in%colnames(data)){ data1[,"BR"]=data[,"BR"]*1.5}


  ends=match(date,rownames(data))
  begin=ends-sdobs+1
  begin1=ends-sdobs1+1
  covar=matrix(NA,ncol(data),ncol(data))
  corr=matrix(NA,ncol(data),ncol(data))
  corr1=matrix(NA,ncol(data),ncol(data))
  var=array()
  rownames(covar)=colnames(data)
  colnames(covar)=colnames(data)
  for (i in 1:ncol(data1)){
    var[i]=sqrt(var(data1[begin:ends,i],data1[begin:ends,i],na.rm=TRUE))
  }

  for (i in 1:ncol(data)){
    for (j in 1:ncol(data)){
      corr[i,j]=cor(data1[begin:ends,i],data1[begin:ends,j],"pairwise.complete.obs")
    }
  }
  corrdiag=diag(1,ncol(data),ncol(data))
  corr=0.9*corr+0.1*corrdiag
  #corr=1*corr+0*corrdiag
  covar=(var%o%var)*corr


  covar[is.na(covar[,])]=0
  wgt[is.na(wgt)]=0
  realized=sqrt((t(t(wgt))%*%covar)%*%t(wgt))*sqrt(260)

  return(realized)

}

findwgtewma=function(data,date,wgt){

  sdobs=130
  sdobs1=130
  data1=data
  ###
  # if("RU"%in%colnames(data)){ data1[,"RU"]=data[,"RU"]*1.5}
  #
  # if("BR"%in%colnames(data)){ data1[,"BR"]=data[,"BR"]*1.5}


  ends=match(date,rownames(data))
  begin=ends-sdobs+1
  begin1=ends-sdobs1+1
  covar=matrix(NA,ncol(data),ncol(data))
  corr=matrix(NA,ncol(data),ncol(data))
  corr1=matrix(NA,ncol(data),ncol(data))
  var=array()
  rownames(covar)=colnames(data)
  colnames(covar)=colnames(data)
  for (i in 1:ncol(data1)){
    var[i]=sqrt(var(data1[begin:ends,i],data1[begin:ends,i],na.rm=TRUE))
  }

  for (i in 1:ncol(data)){
    for (j in 1:ncol(data)){
      corr[i,j]=cor(data1[begin:ends,i],data1[begin:ends,j],"pairwise.complete.obs")
    }
  }
  corrdiag=diag(1,ncol(data),ncol(data))
  corr=0.9*corr+0.1*corrdiag
  #corr=1*corr+0*corrdiag
  covar=(var%o%var)*corr

  # covar=covEstimation(as.matrix(data1[begin:ends,]),control = list(type = 'ewma',lambda=0.97))
  #

  covar[is.na(covar[,])]=0
  wgt[is.na(wgt)]=0
  realized=sqrt((t(t(wgt))%*%covar)%*%t(wgt))*sqrt(260)

  return(realized)

}

findcovar=function(data,date){

  sdobs=520
  sdobs1=130
  data1=data
  ###
  # if("RU"%in%colnames(data)){ data1[,"RU"]=data[,"RU"]*1.5}
  #
  # if("BR"%in%colnames(data)){ data1[,"BR"]=data[,"BR"]*1.5}


  ends=match(date,rownames(data))
  begin=ends-sdobs+1
  begin1=ends-sdobs1+1
  covar=matrix(NA,ncol(data),ncol(data))
  corr=matrix(NA,ncol(data),ncol(data))
  corr1=matrix(NA,ncol(data),ncol(data))
  var=array()
  rownames(covar)=colnames(data)
  colnames(covar)=colnames(data)
  for (i in 1:ncol(data1)){
    var[i]=sqrt(var(data1[begin:ends,i],data1[begin:ends,i],na.rm=TRUE))
  }

  for (i in 1:ncol(data)){
    for (j in 1:ncol(data)){
      corr[i,j]=cor(data1[begin:ends,i],data1[begin:ends,j],"pairwise.complete.obs")
    }
  }
  corrdiag=diag(1,ncol(data),ncol(data))

  corr=1*corr+0*corrdiag
  covar=(var%o%var)*corr


  covar[is.na(covar[,])]=0

  realized=covar*sqrt(52)

  return(realized)

}

findwgtvol=function(data,date,wgt){

  sdobs=260

  ends=match(date,rownames(data))
  begin=ends-sdobs+1

  covar=matrix(NA,1,ncol(data))

  colnames(covar)=colnames(data)
  for (i in 1:ncol(data)){

    covar[1,i]=cov(data[begin:ends,i],data[begin:ends,i],"pairwise.complete.obs")


  }
  covar[is.na(covar[,])]=0
  wgt[is.na(wgt)]=0
  realized=sqrt(sum(abs(wgt)*covar,na.rm=TRUE)*260)

  return(realized)

}

factor=function(TSRV,CSRV,Ret,TSweek=FALSE,CSLS="notional",TSWGT=1,CSWGT=1,ex=0,CSweek=1,monitor=1,IR=0,RB1=RBP, rpname=name1,BETA=betamat){
  rpname=paste(rpname)
  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  RB2=RB1
  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=90
  #assetsd=259
  statsd=90
  ##volupdate trigger
  Volband=0.05


  std=as.data.frame(rollapplyr(Ret,assetsd,sd))*sqrt(260)
  rownames(std)=rownames(Ret)[(assetsd):nrow(Ret)]
  STD=std*0
  #
  # std=as.data.frame(rollapplyr(Ret,assetsd,EWMAvol))*sqrt(260)
  # rownames(std)=rownames(Ret)[(assetsd):nrow(Ret)]
  # STD=std*0


  STD[1,]=std[1,]
  for (k in 2:nrow(std)){
    count=0
    for(j in 1:ncol(std)){
      if(!is.na(std[k,j])){

        if(is.na(STD[k-1,j])){STD[k-1,j]=std[k,j]}
        if(abs(std[k,j]-STD[k-1,j])>Volband*STD[k-1,j]){
          count=count+1
        }
      }
    }
    for(jj in 1:ncol(std)){

      if (count>0) {STD[k,jj]=std[k,jj]}
      else {STD[k,jj]=STD[k-1,jj]}

    }
  }
  if(IR!=1){STD[STD[,]<0.15]=0.15}

  #weekly implementation?
  if(TSweek=="week"){
    TSRV1=TSRV*0
    TSRV1[1,]=TSRV[1,]

    for (k in 2:nrow(TSRV)){
      if((wday(rownames(TSRV)[k])==RB1|wday(rownames(TSRV)[k])==RB2)){TSRV1[k,]=TSRV[k,]
      } else(TSRV1[k,]=TSRV1[k-1,])
    }
    ##
  }

  if(TSweek=="month"){
    TSRV1=TSRV*0
    TSRV1[1,]=TSRV[1,]

    monthcount=month(rownames(TSRV))

    for (k in 2:nrow(CSRV)){
      if(rownames(TSRV)[k]%in%rownames(fx)){TSRV1[k,]=TSRV[k,]
      #if((month(rownames(TSRV)[k-1]))!= (month(rownames(TSRV)[k]))){TSRV1[k,]=TSRV[k,]
      } else(TSRV1[k,]=TSRV1[k-1,])
    }
  }


  if(TSweek==FALSE){TSRV1=TSRV}

  TSRV=TSRV1
  ###target vol index
  VCweight=Assetvol/STD
  rownames(VCweight)=rownames(std)

  AA=intersect(rownames(VCweight),rownames(TSRV))
  VCTSpos=VCweight[AA,]*TSRV[AA,]


  VCTSpos[VCTSpos[,]==Inf]=NA
  ret1=Ret[rownames(Ret)%in%rownames(VCTSpos),]
  ##return of VC strategy
  Strategy=as.data.frame(rowSums(ret1[2:nrow(ret1),]*VCTSpos[1:(nrow(VCTSpos)-1),],na.rm=TRUE))
  ##risk of strategy expanding window
  #
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])
  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)

  }

  # if(ex!=1){
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  # }
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2

  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if(abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}

  }

  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(STD)),nrow=length(kk))
  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]

  TSposition=VCTSpos[rownames(VCTSpos)%in%rownames(statlev),]*statlev
  TSposition[is.na(TSposition)]=0
  # TSposition1=TSposition*0
  # sss=kk*0
  # for(k in 1:nrow(TSposition))
  #   sss[k]=findwgtvol(Ret,rownames(TSposition)[k],TSposition[k,])
  #   if(findwgt(Ret,rownames(TSposition)[k],TSposition[k,])>(2*Strategyvol)){
  #     TSposition1[k,]=TSposition[k,]/2
  #   } else (TSposition1[k,]=TSposition[k,])

  TSposition=TSposition*TSWGT
  ret1=Ret[rownames(Ret)%in%rownames(TSposition),]
  TSStrategy=as.data.frame(rowSums(ret1[2:nrow(ret1),]*TSposition[1:(nrow(TSposition)-1),],na.rm=TRUE))
  TSStrategylag=as.data.frame(rowSums(ret1[3:nrow(ret1),]*TSposition[1:(nrow(TSposition)-2),],na.rm=TRUE))
  TSStrategylag=rbind(0,TSStrategylag)

  TSTO=rowSums(abs(TSposition[2:nrow(TSposition),]-TSposition[1:(nrow(TSposition)-1),]),na.rm=TRUE)

  #CS portfolio
  ########THIS IS VOL ADJUSTED!!!
  STD1=STD[rownames(STD)%in%rownames(CSRV),]
  BETA1=STD1*0+1
  ret2=Ret[rownames(Ret)%in%rownames(CSRV),]
  if(CSLS=="notional"){CSRV2=CSRV
  #if ("RU"%in% colnames(CSRV)) {CSRV2[,"RU"]=0.5*CSRV2[,"RU"]}
  #if ("BR"%in% colnames(CSRV)) {CSRV2[,"BR"]=0.5*CSRV2[,"BR"]}
  }

  if(CSLS=="beta"){


    for (ss in 1:nrow(BETA)){
      BETA1[rownames(BETA1)>=rownames(BETA)[ss],]=BETA[ss,]
    }
    CSRV2=CSRV/BETA1}



  if(CSLS=="vol"){CSRV2=CSRV*Assetvol/STD1}
  if(CSLS=="US"){CSRV2=CSRV
  CSRV2[,"SPX"]=3*CSRV2[,"SPX"]}
  if(CSLS=="BRRU"){CSRV2=CSRV
  CSRV2[,"RU"]=0.5*CSRV2[,"RU"]
  CSRV2[,"BR"]=0.5*CSRV2[,"BR"]
  }



  CSRV1=CSRV*0
  week=as.numeric(strftime(as.POSIXlt(rownames(CSRV)),format="%W"))
  if(CSweek==1){

    CSRV1[1,]=CSRV2[1,1:ncol(CSRV1)]*Strategyvol/findwgtewma(Ret,rownames(CSRV)[1],CSRV2[1,1:ncol(CSRV1)])
    for (k in 2:nrow(CSRV)){
      if((wday(rownames(CSRV)[k])==RB1|wday(rownames(CSRV)[k])==RB2)& week[k]%%1==0 ){CSRV1[k,]=CSRV2[k,1:ncol(CSRV1)]*Strategyvol/findwgtewma(Ret,rownames(CSRV)[k],CSRV2[k,1:ncol(CSRV1)])
      } else(CSRV1[k,]=CSRV1[k-1,])
    }
  }
  if(CSweek!=1){
    monthcount=month(rownames(CSRV))
    CSRV1[1,]=CSRV2[1,1:ncol(CSRV1)]*Strategyvol/findwgtewma(Ret,rownames(CSRV)[1],CSRV2[1,1:ncol(CSRV1)])
    for (k in 2:nrow(CSRV)){
      if(rownames(CSRV)[k]%in%rownames(fx)){CSRV1[k,]=CSRV2[k,1:ncol(CSRV1)]*Strategyvol/findwgtewma(Ret,rownames(CSRV)[k],CSRV2[k,1:ncol(CSRV1)])
      #if((month(rownames(CSRV)[k-1]))!= (month(rownames(CSRV)[k]))){CSRV1[k,]=CSRV2[k,1:ncol(CSRV1)]*Strategyvol/findwgtewma(Ret,rownames(CSRV)[k],CSRV2[k,1:ncol(CSRV1)])
      } else(CSRV1[k,]=CSRV1[k-1,])
    }
  }
  ###

  ##Need to make time series of CS raw strategy, then vol control and match dates with TS strategy

  CSraw=as.data.frame(rowSums(ret2[2:nrow(ret2),]*CSRV1[1:(nrow(CSRV1)-1),],na.rm=TRUE))

  if(ex==1){
    CSrisk=as.data.frame(CSraw[statsd:nrow(CSraw),1])
    for (i in 1:nrow(CSrisk)){
      CSrisk[i,1]=sd(CSraw[1:(i+statsd-1),1])*sqrt(260)

    }
  }


  if(ex!=1){CSrisk=as.data.frame(rollapplyr(CSraw, statsd, sd)*sqrt(260))}




  rownames(CSrisk)=rownames(CSraw)[statsd:nrow(CSraw)]
  week=as.numeric(strftime(as.POSIXlt(rownames(CSrisk)),format="%W"))

  bufrisk1=CSrisk*0
  bufrisk1[1,]=CSrisk[1,]
  if(monitor==1){
    for(k in 2:nrow(CSrisk)){
      if(abs(CSrisk[k,1]-bufrisk1[k-1,1])>Volband* Strategyvol & (wday(rownames(CSrisk)[k])==RB1|wday(rownames(CSrisk)[k])==RB2)){
        bufrisk1[k,1]=CSrisk[k,1]
      } else{bufrisk1[k,1]=bufrisk1[k-1,1]}

    }}
  if(monitor==0){
    for(k in 2:nrow(CSrisk)){
      if(abs(CSrisk[k,1]-bufrisk1[k-1,1])>Volband* Strategyvol & (rownames(CSrisk)[k] %in% rownames(fx))){
        # if(abs(CSrisk[k,1]-bufrisk1[k-1,1])>Volband* Strategyvol & (month(rownames(CSrisk)[k])!=month(rownames(CSrisk)[k-1]))){
        bufrisk1[k,1]=CSrisk[k,1]
      } else{bufrisk1[k,1]=bufrisk1[k-1,1]}

    }}
  # kkk=(Strategyvol/bufrisk1[,1])*0+1
  kkk=Strategyvol/bufrisk1[,1]
  statlev1=as.data.frame(matrix(rep(kkk,ncol(STD)),nrow=length(kkk)))
  rownames(statlev1)=rownames(CSrisk)

  CSposition=CSRV1[rownames(CSRV1)%in%rownames(statlev1),]*statlev1*CSWGT
  CSposition[is.na(CSposition)]=0


  ret1=Ret[rownames(Ret)%in%rownames(CSposition),]

  CSStrategy=as.data.frame(rowSums(ret1[2:nrow(ret1),]*CSposition[1:(nrow(CSposition)-1),],na.rm=TRUE))
  CSStrategylag=as.data.frame(rowSums(ret1[3:nrow(ret1),]*CSposition[1:(nrow(CSposition)-2),],na.rm=TRUE))
  CSStrategylag=rbind(0,CSStrategylag)
  CSTO=rowSums(abs(CSposition[2:nrow(CSposition),]-CSposition[1:(nrow(CSposition)-1),]),na.rm=TRUE)

  ####output
  CS=CSposition
  TS=TSposition


  #####Factor vol control
  # factor=CSposition+TSposition
  #
  # ret3=Ret[rownames(Ret)%in%rownames(factor),]
  # factorraw=as.data.frame(rowSums(ret3[2:nrow(ret3),]*factor[1:(nrow(factor)-1),],na.rm=TRUE))
  # factorrisk=as.data.frame(rollapplyr(factorraw, factorsd, sd)*sqrt(260))
  # rownames(factorrisk)=rownames(factorraw)[factorsd:nrow(factorraw)]
  #
  # bufrisk2=factorrisk*0
  # bufrisk2[1,]=factorrisk[1,]
  # if(monitor==1){
  # for(k in 2:nrow(factorrisk)){
  #   if(abs(factorrisk[k,1]-bufrisk2[k-1,1])>Volband*factorrisk[k,1] & (wday(rownames(factorrisk)[k])==RB1|wday(rownames(factorrisk)[k])==RB2)){
  #     bufrisk2[k,1]=factorrisk[k,1]
  #   } else{bufrisk2[k,1]=bufrisk2[k-1,1]}
  # }}
  #
  # if(monitor==0){
  # for(k in 2:nrow(factorrisk)){
  #   if(abs(factorrisk[k,1]-bufrisk2[k-1,1])>Volband*factorrisk[k,1] & (month(rownames(factorrisk)[k])!=month(rownames(factorrisk)[k-1]))){
  #     bufrisk2[k,1]=factorrisk[k,1]
  #   } else{bufrisk2[k,1]=bufrisk2[k-1,1]}
  # }
  # }
  #
  # kkkk=factorvol/bufrisk2[,1]
  # factorlev1=as.data.frame(matrix(rep(kkkk,ncol(STD)),nrow=length(kkkk)))
  # rownames(factorlev1)=rownames(factorrisk)
  # factorposition=factor[rownames(factor)%in%rownames(factorlev1),]*factorlev1
  # colnames(factorposition)=colnames(index)
  #
  # AGGTO=rowSums(abs(factorposition[2:nrow(factorposition),]-factorposition[1:(nrow(factorposition)-1),]),na.rm=TRUE)
  #
  #
  #
  # ret4=Ret[rownames(Ret)%in%rownames(factorposition),]
  #
  #
  # factorreturn=as.data.frame(rowSums(ret4[2:nrow(ret4),]*factorposition[1:(nrow(factorposition)-1),],na.rm=TRUE))
  # #quickcheck
  # output=cbind(TSStrategy,TSStrategylag,CSStrategy,CSStrategylag,TSTO,CSTO)
  # output1=output[rownames(output)%in%rownames(factorreturn),]
  # output2=cbind(factorreturn,output1,AGGTO)

  # giveup=list(factorposition,output2,TSposition,CSposition,TSRV,CSRV1,kk,kkk,kkkk)
  giveup=list(TSposition,CSposition,TSRV1,CSRV1)

  TScheck11=paste(100*round(sum(RAWlag(TSposition[rownames(TSposition)>perfdate11,],Ret)),4),"%",sep="")
  TScheck1=paste(100*round(sum(RAWlag(TSposition[rownames(TSposition)>perfdate1,],Ret)),4),"%",sep="")
  TScheck2=paste(100*round(sum(RAWlag(TSposition[rownames(TSposition)>perfdate2,],Ret)),4),"%",sep="")
  TScheck3=paste(100*round(sum(RAWlag(TSposition[rownames(TSposition)>perfdate3,],Ret)),4),"%",sep="")

  CScheck11=paste(100*round(sum(RAWlag(CSposition[rownames(CSposition)>perfdate11,],Ret)),4),"%",sep="")
  CScheck1=paste(100*round(sum(RAWlag(CSposition[rownames(CSposition)>perfdate1,],Ret)),4),"%",sep="")
  CScheck2=paste(100*round(sum(RAWlag(CSposition[rownames(CSposition)>perfdate2,],Ret)),4),"%",sep="")
  CScheck3=paste(100*round(sum(RAWlag(CSposition[rownames(CSposition)>perfdate3,],Ret)),4),"%",sep="")

  print(paste(TScheck11,TScheck1,TScheck2,TScheck3))
  print(paste(CScheck11,CScheck1,CScheck2,CScheck3))
  print(colSums(TSRV))
  print(tail(TS))
  print(colSums(CSRV))
  print(tail(CS))

  charts.PerformanceSummary(cbind(RAW(TSposition[rownames(TSposition)>perfdate4,],Ret),RAW(CSposition[rownames(CSposition)>perfdate4,],Ret)),main=rpname)
  charts.PerformanceSummary(cbind(RAWlag(TSposition[rownames(TSposition)>perfdate4,],Ret),RAWlag(CSposition[rownames(CSposition)>perfdate4,],Ret)),main=paste(rpname,"lag"))
  # charts.RollingPerformance(RAWlag(CSposition[rownames(CSposition)>perfdate3,],Ret),main=paste(rpname,"_CS",sep=""))
  return(giveup)
}

irfactor=function(TSRV,CSRV,Ret,TSweek=FALSE,CSLS="vol",TSWGT=1,CSWGT=1,ex=0,CSweek=1,monitor=1,IR=1,RB1=RBP,rpname=name1){

  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  RB2=RB1
  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=90
  statsd=90
  ##volupdate trigger
  Volband=0.05



  std=as.data.frame(rollapplyr(Ret,assetsd,sd))*sqrt(260)
  rownames(std)=rownames(Ret)[(assetsd):nrow(Ret)]
  STD=std*0

  # std=as.data.frame(rollapplyr(Ret,assetsd,EWMAvol,lambda=0.97))*sqrt(260)
  # rownames(std)=rownames(Ret)[(assetsd):nrow(Ret)]
  # STD=std*0

  STD[1,]=std[1,]
  for (k in 2:nrow(std)){
    count=0
    for(j in 1:ncol(std)){
      if(!is.na(std[k,j])){

        if(is.na(STD[k-1,j])){STD[k-1,j]=std[k,j]}
        if(abs(std[k,j]-STD[k-1,j])>Volband*STD[k-1,j]){
          count=count+1
        }
      }
    }
    for(jj in 1:ncol(std)){

      if (count>0) {STD[k,jj]=std[k,jj]}
      else {STD[k,jj]=STD[k-1,jj]}

    }
  }
  STD[STD[,]<0.04]=0.04

  #weekly implementation?
  if(TSweek=="week"){
    TSRV1=TSRV*0
    TSRV1[1,]=TSRV[1,]

    for (k in 2:nrow(TSRV)){
      if((wday(rownames(TSRV)[k])==RB1|wday(rownames(TSRV)[k])==RB2)){TSRV1[k,]=TSRV[k,]
      } else(TSRV1[k,]=TSRV1[k-1,])
    }
    ##
  }

  if(TSweek=="month"){
    TSRV1=TSRV*0
    TSRV1[1,]=TSRV[1,]

    monthcount=month(rownames(TSRV))

    for (k in 2:nrow(CSRV)){
      if(rownames(TSRV)[k]%in%rownames(fx)){TSRV1[k,]=TSRV[k,]
      #if((month(rownames(TSRV)[k-1]))!= (month(rownames(TSRV)[k]))){TSRV1[k,]=TSRV[k,]
      } else(TSRV1[k,]=TSRV1[k-1,])
    }
  }


  if(TSweek==FALSE){TSRV1=TSRV}

  TSRV=TSRV1
  ###target vol index
  VCweight=Assetvol/STD
  rownames(VCweight)=rownames(std)

  AA=intersect(rownames(VCweight),rownames(TSRV))
  VCTSpos=VCweight[AA,]*TSRV[AA,]


  VCTSpos[VCTSpos[,]==Inf]=NA
  ret1=Ret[rownames(Ret)%in%rownames(VCTSpos),]
  ##return of VC strategy
  Strategy=as.data.frame(rowSums(ret1[2:nrow(ret1),]*VCTSpos[1:(nrow(VCTSpos)-1),],na.rm=TRUE))
  ##risk of strategy expanding window
  #
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])
  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)

  }

  # if(ex!=1){
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  # }
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2

  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if(abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}

  }

  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(STD)),nrow=length(kk))
  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]

  TSposition=VCTSpos[rownames(VCTSpos)%in%rownames(statlev),]*statlev
  TSposition[is.na(TSposition)]=0
  # TSposition1=TSposition*0
  # sss=kk*0
  # for(k in 1:nrow(TSposition))
  #   sss[k]=findwgtvol(Ret,rownames(TSposition)[k],TSposition[k,])
  #   if(findwgt(Ret,rownames(TSposition)[k],TSposition[k,])>(2*Strategyvol)){
  #     TSposition1[k,]=TSposition[k,]/2
  #   } else (TSposition1[k,]=TSposition[k,])

  TSposition=TSposition*TSWGT
  ret1=Ret[rownames(Ret)%in%rownames(TSposition),]
  TSStrategy=as.data.frame(rowSums(ret1[2:nrow(ret1),]*TSposition[1:(nrow(TSposition)-1),],na.rm=TRUE))
  TSStrategylag=as.data.frame(rowSums(ret1[3:nrow(ret1),]*TSposition[1:(nrow(TSposition)-2),],na.rm=TRUE))
  TSStrategylag=rbind(0,TSStrategylag)

  TSTO=rowSums(abs(TSposition[2:nrow(TSposition),]-TSposition[1:(nrow(TSposition)-1),]),na.rm=TRUE)

  #CS portfolio
  ########THIS IS VOL ADJUSTED!!!
  STD1=STD[rownames(STD)%in%rownames(CSRV),]
  ret2=Ret[rownames(Ret)%in%rownames(CSRV),]
  if(CSLS=="notional"){CSRV2=CSRV}
  if(CSLS=="vol"){CSRV2=CSRV*Assetvol/STD1}





  CSRV1=CSRV*0
  week=as.numeric(strftime(as.POSIXlt(rownames(CSRV)),format="%W"))
  if(CSweek==1){

    CSRV1[1,]=CSRV2[1,1:ncol(CSRV1)]*Strategyvol/findwgt(Ret,rownames(CSRV)[1],CSRV2[1,1:ncol(CSRV1)])
    for (k in 2:nrow(CSRV)){
      if((wday(rownames(CSRV)[k])==RB1|wday(rownames(CSRV)[k])==RB2)& week[k]%%1==0 ){CSRV1[k,]=CSRV2[k,1:ncol(CSRV1)]*Strategyvol/findwgtewma(Ret,rownames(CSRV)[k],CSRV2[k,1:ncol(CSRV1)])
      } else(CSRV1[k,]=CSRV1[k-1,])
    }
  }
  if(CSweek!=1){
    monthcount=month(rownames(CSRV))
    CSRV1[1,]=CSRV2[1,1:ncol(CSRV1)]*Strategyvol/findwgt(Ret,rownames(CSRV)[1],CSRV2[1,1:ncol(CSRV1)])
    for (k in 2:nrow(CSRV)){
      if(rownames(CSRV)[k]%in%rownames(fx)){CSRV1[k,]=CSRV2[k,1:ncol(CSRV1)]*Strategyvol/findwgtewma(Ret,rownames(CSRV)[k],CSRV2[k,1:ncol(CSRV1)])
      #if((month(rownames(CSRV)[k-1]))!= (month(rownames(CSRV)[k]))){CSRV1[k,]=CSRV2[k,1:ncol(CSRV1)]*Strategyvol/findwgtewma(Ret,rownames(CSRV)[k],CSRV2[k,1:ncol(CSRV1)])
      } else(CSRV1[k,]=CSRV1[k-1,])
    }
  }
  ###

  ##Need to make time series of CS raw strategy, then vol control and match dates with TS strategy

  CSraw=as.data.frame(rowSums(ret2[2:nrow(ret2),]*CSRV1[1:(nrow(CSRV1)-1),],na.rm=TRUE))

  if(ex==1){
    CSrisk=as.data.frame(CSraw[statsd:nrow(CSraw),1])
    for (i in 1:nrow(CSrisk)){
      CSrisk[i,1]=sd(CSraw[1:(i+statsd-1),1])*sqrt(260)

    }
  }


  if(ex!=1){CSrisk=as.data.frame(rollapplyr(CSraw, statsd, sd)*sqrt(260))}




  rownames(CSrisk)=rownames(CSraw)[statsd:nrow(CSraw)]
  week=as.numeric(strftime(as.POSIXlt(rownames(CSrisk)),format="%W"))

  bufrisk1=CSrisk*0
  bufrisk1[1,]=CSrisk[1,]
  if(monitor==1){
    for(k in 2:nrow(CSrisk)){
      if(abs(CSrisk[k,1]-bufrisk1[k-1,1])>Volband* Strategyvol & (wday(rownames(CSrisk)[k])==RB1|wday(rownames(CSrisk)[k])==RB2)){
        bufrisk1[k,1]=CSrisk[k,1]
      } else{bufrisk1[k,1]=bufrisk1[k-1,1]}

    }}
  if(monitor==0){
    for(k in 2:nrow(CSrisk)){
      if(abs(CSrisk[k,1]-bufrisk1[k-1,1])>Volband* Strategyvol & (rownames(CSrisk)[k] %in% rownames(fx))){
        # if(abs(CSrisk[k,1]-bufrisk1[k-1,1])>Volband* Strategyvol & (month(rownames(CSrisk)[k])!=month(rownames(CSrisk)[k-1]))){
        bufrisk1[k,1]=CSrisk[k,1]
      } else{bufrisk1[k,1]=bufrisk1[k-1,1]}

    }}
  # kkk=(Strategyvol/bufrisk1[,1])*0+1
  kkk=Strategyvol/bufrisk1[,1]
  statlev1=as.data.frame(matrix(rep(kkk,ncol(STD)),nrow=length(kkk)))
  rownames(statlev1)=rownames(CSrisk)

  CSposition=CSRV1[rownames(CSRV1)%in%rownames(statlev1),]*statlev1*CSWGT
  CSposition[is.na(CSposition)]=0


  ret1=Ret[rownames(Ret)%in%rownames(CSposition),]

  CSStrategy=as.data.frame(rowSums(ret1[2:nrow(ret1),]*CSposition[1:(nrow(CSposition)-1),],na.rm=TRUE))
  CSStrategylag=as.data.frame(rowSums(ret1[3:nrow(ret1),]*CSposition[1:(nrow(CSposition)-2),],na.rm=TRUE))
  CSStrategylag=rbind(0,CSStrategylag)
  CSTO=rowSums(abs(CSposition[2:nrow(CSposition),]-CSposition[1:(nrow(CSposition)-1),]),na.rm=TRUE)

  ####output
  CS=CSposition
  TS=TSposition


  #####Factor vol control
  # factor=CSposition+TSposition
  #
  # ret3=Ret[rownames(Ret)%in%rownames(factor),]
  # factorraw=as.data.frame(rowSums(ret3[2:nrow(ret3),]*factor[1:(nrow(factor)-1),],na.rm=TRUE))
  # factorrisk=as.data.frame(rollapplyr(factorraw, factorsd, sd)*sqrt(260))
  # rownames(factorrisk)=rownames(factorraw)[factorsd:nrow(factorraw)]
  #
  # bufrisk2=factorrisk*0
  # bufrisk2[1,]=factorrisk[1,]
  # if(monitor==1){
  # for(k in 2:nrow(factorrisk)){
  #   if(abs(factorrisk[k,1]-bufrisk2[k-1,1])>Volband*factorrisk[k,1] & (wday(rownames(factorrisk)[k])==RB1|wday(rownames(factorrisk)[k])==RB2)){
  #     bufrisk2[k,1]=factorrisk[k,1]
  #   } else{bufrisk2[k,1]=bufrisk2[k-1,1]}
  # }}
  #
  # if(monitor==0){
  # for(k in 2:nrow(factorrisk)){
  #   if(abs(factorrisk[k,1]-bufrisk2[k-1,1])>Volband*factorrisk[k,1] & (month(rownames(factorrisk)[k])!=month(rownames(factorrisk)[k-1]))){
  #     bufrisk2[k,1]=factorrisk[k,1]
  #   } else{bufrisk2[k,1]=bufrisk2[k-1,1]}
  # }
  # }
  #
  # kkkk=factorvol/bufrisk2[,1]
  # factorlev1=as.data.frame(matrix(rep(kkkk,ncol(STD)),nrow=length(kkkk)))
  # rownames(factorlev1)=rownames(factorrisk)
  # factorposition=factor[rownames(factor)%in%rownames(factorlev1),]*factorlev1
  # colnames(factorposition)=colnames(index)
  #
  # AGGTO=rowSums(abs(factorposition[2:nrow(factorposition),]-factorposition[1:(nrow(factorposition)-1),]),na.rm=TRUE)
  #
  #
  #
  # ret4=Ret[rownames(Ret)%in%rownames(factorposition),]
  #
  #
  # factorreturn=as.data.frame(rowSums(ret4[2:nrow(ret4),]*factorposition[1:(nrow(factorposition)-1),],na.rm=TRUE))
  # #quickcheck
  # output=cbind(TSStrategy,TSStrategylag,CSStrategy,CSStrategylag,TSTO,CSTO)
  # output1=output[rownames(output)%in%rownames(factorreturn),]
  # output2=cbind(factorreturn,output1,AGGTO)

  # giveup=list(factorposition,output2,TSposition,CSposition,TSRV,CSRV1,kk,kkk,kkkk)
  giveup=list(TSposition,CSposition,TSRV1,CSRV1)

  TScheck11=paste(100*round(sum(RAWlag(TSposition[rownames(TSposition)>perfdate11,],Ret)),4),"%",sep="")
  TScheck1=paste(100*round(sum(RAWlag(TSposition[rownames(TSposition)>perfdate1,],Ret)),4),"%",sep="")
  TScheck2=paste(100*round(sum(RAWlag(TSposition[rownames(TSposition)>perfdate2,],Ret)),4),"%",sep="")
  TScheck3=paste(100*round(sum(RAWlag(TSposition[rownames(TSposition)>perfdate3,],Ret)),4),"%",sep="")

  CScheck11=paste(100*round(sum(RAWlag(CSposition[rownames(CSposition)>perfdate11,],Ret)),4),"%",sep="")
  CScheck1=paste(100*round(sum(RAWlag(CSposition[rownames(CSposition)>perfdate1,],Ret)),4),"%",sep="")
  CScheck2=paste(100*round(sum(RAWlag(CSposition[rownames(CSposition)>perfdate2,],Ret)),4),"%",sep="")
  CScheck3=paste(100*round(sum(RAWlag(CSposition[rownames(CSposition)>perfdate3,],Ret)),4),"%",sep="")

  print(paste(TScheck11,TScheck1,TScheck2,TScheck3))
  print(paste(CScheck11,CScheck1,CScheck2,CScheck3))
  print(colSums(TSRV))
  print(tail(TSRV))
  print(colSums(CSRV))
  print(tail(CSRV))
  charts.PerformanceSummary(cbind(RAW(TSposition[rownames(TSposition)>perfdate4,],Ret),RAW(CSposition[rownames(CSposition)>perfdate4,],Ret)),main=rpname)
  charts.PerformanceSummary(cbind(RAWlag(TSposition[rownames(TSposition)>perfdate4,],Ret),RAWlag(CSposition[rownames(CSposition)>perfdate4,],Ret)),main=paste(rpname,"lag"))


  return(giveup)
}



TScombine=function(TS1,TS2,TS3=NULL,WGT1,WGT2,WGT3=NULL,Ret,RB1){
  statsd=130
  Volband=0.1
  Strategyvol=0.02

  if(is.null(TS3)){TS=TS1*WGT1+TS2*WGT2}
  if(!is.null(TS3)){TS=TS1*WGT1+TS2*WGT2+TS3*WGT3}
  #cutoff 0s
  TS0=rowSums(abs(TS))
  start=min(which(TS0 != 0))
  TS=TS[start:nrow(TS),]

  Ret1=Ret[rownames(TS),colnames(TS)]

  Strategy=as.data.frame(rowSums(Ret1[2:nrow(Ret1),]*TS[1:(nrow(TS)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]


  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(Ret1)),nrow=length(kk))
  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkts=as.data.frame(statlev[,1])
  TSoutput=TS[rownames(statlev),]*statlev
  TSlong=TS1*0
  TSlong[rownames(TSoutput),]=TSoutput
  giveup=list(TSlong,kkts)
  return(giveup)
}
CScombine=function(CS1,CS2,CS3=NULL,WGT1,WGT2,WGT3=NULL,Ret){
  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  statsd=130
  Volband=0.1
  Strategyvol=0.02
  CSlong=CS1*0
  if(is.null(CS3)){CS=CS1*WGT1+CS2*WGT2}
  if(!is.null(CS3)){CS=CS1*WGT1+CS2*WGT2+CS3*WGT3}
  #cutoff 0s
  CS0=rowSums(abs(CS))
  start=min(which(CS0 != 0))
  CS=CS[start:nrow(CS),]

  Ret1=Ret[rownames(CS),colnames(CS)]
  Ret=Ret[,colnames(CS)]
  kkk=as.data.frame(matrix(NA,nrow(CS),1))
  rownames(kkk)=rownames(CS)
  CS1=CS*0
  CS2=CS
  CS1[1,]=CS2[1,]*Strategyvol/findwgtewma(Ret,rownames(CS)[1],CS2[1,1:ncol(CS1)])
  kkk[1,]=Strategyvol/findwgtewma(Ret,rownames(CS)[1],CS2[1,1:ncol(CS1)])
  for (k in 2:nrow(CS)){
    if(rownames(CS)[k]%in%rownames(fx)|wday(rownames(CS)[k])==RB1){
      #    if((month(rownames(CS)[k-1]))!= (month(rownames(CS)[k]))){
      levcs=Strategyvol/findwgtewma(Ret,rownames(CS)[k],CS2[k,1:ncol(CS1)])
      CS1[k,]=CS2[k,1:ncol(CS1)]*levcs
      kkk[k,1]=levcs
    } else {CS1[k,]=CS1[k-1,]
    kkk[k,1]=kkk[k-1,1]}
  }

  CSlong[rownames(CS1),]=CS1
  # CSlong[rownames(CSoutput),]=TSoutput


  # Strategy=as.data.frame(rowSums(Ret1[2:nrow(Ret1),]*CS[1:(nrow(CS)-1),],na.rm=TRUE))
  # Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])
  #
  # for (i in 1:nrow(Strategyrisk)){
  #   Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  # }
  # Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  # Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  #
  # bufrisk=Strategyrisk*0
  # bufrisk[1,]=Strategyrisk[1,]
  # for(k in 2:nrow(Strategyrisk)){
  #   if(abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband*Strategyrisk[k,1]){
  #     bufrisk[k,1]=Strategyrisk[k,1]
  #   } else{bufrisk[k,1]=bufrisk[k-1,1]}
  # }
  # kk=Strategyvol/bufrisk[,1]
  #
  # ###calcuate constant risk strategy
  # statlev=matrix(rep(kk,ncol(Ret1)),nrow=length(kk))
  # rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  #
  # CSoutput=CS[rownames(statlev),]*statlev
  # CSlong=CS1*0
  # CSlong[rownames(CSoutput),]=TSoutput

  giveup=list(CSlong,kkk)
  return(giveup)

}
Assetcombine=function(Com,Eq,EM,Ret,CWGT,EMWGT,RB1){
  statsd=130
  Volband=0.1
  Strategyvol=0.02
  Clong=Com*0
  Com0=rowSums(abs(Com))
  start=min(which(Com0 != 0))
  Com=Com[start:nrow(Com),]
  CRet=Ret[rownames(Com),colnames(Com)]


  Strategy=as.data.frame(rowSums(CRet[2:nrow(CRet),]*Com[1:(nrow(Com)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>(Volband* Strategyvol))& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(CRet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkcom=as.data.frame(statlev[,1])
  Coutput=Com[rownames(statlev),]*statlev
  Clong[rownames(Coutput),]=Coutput

  ##EQ

  Elong=Eq*0
  Eq0=rowSums(abs(Eq))
  start=min(which(Eq0 != 0))
  Eq=Eq[start:nrow(Eq),]
  ERet=Ret[rownames(Eq),colnames(Eq)]


  Strategy=as.data.frame(rowSums(ERet[2:nrow(ERet),]*Eq[1:(nrow(Eq)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband*Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(ERet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkdm=as.data.frame(statlev[,1])
  Eoutput=Eq[rownames(statlev),]*statlev
  Elong[rownames(Eoutput),]=Eoutput


  ##EM

  EMlong=EM*0
  EM0=rowSums(abs(EM))
  start=min(which(EM0 != 0))
  EM=EM[start:nrow(EM),]
  EMRet=Ret[rownames(EM),colnames(EM)]


  Strategy=as.data.frame(rowSums(EMRet[2:nrow(EMRet),]*EM[1:(nrow(EM)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(EMRet)),nrow=length(kk))
  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkem=as.data.frame(statlev[,1])
  EMoutput=EM[rownames(statlev),]*statlev
  EMlong[rownames(EMoutput),]=EMoutput



  ##combine
  long=cbind(Elong,Clong*CWGT,EMlong*EMWGT)

  long0=rowSums(abs(long))
  start=min(which(long0 != 0))
  long=long[start:nrow(long),]

  ###final
  fRet=Ret[rownames(long),colnames(long)]


  Strategy=as.data.frame(rowSums(fRet[2:nrow(fRet),]*long[1:(nrow(long)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(fRet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkfinal=as.data.frame(statlev[,1])
  output=long[rownames(statlev),]*statlev
  giveup=list(output,kkcom,kkdm,kkem,kkfinal)
  return(giveup)


}
Assetcombine4=function(Com,Eq,EM,IR,Ret,CWGT,EMWGT,IRWGT,RB1){
  statsd=130
  Volband=0.1
  Strategyvol=0.02
  Clong=Com*0
  Com0=rowSums(abs(Com))
  start=min(which(Com0 != 0))
  Com=Com[start:nrow(Com),]
  CRet=Ret[rownames(Com),colnames(Com)]


  Strategy=as.data.frame(rowSums(CRet[2:nrow(CRet),]*Com[1:(nrow(Com)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>(Volband* Strategyvol))& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(CRet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkcom=as.data.frame(statlev[,1])
  Coutput=Com[rownames(statlev),]*statlev
  Clong[rownames(Coutput),]=Coutput

  ##EQ

  Elong=Eq*0
  Eq0=rowSums(abs(Eq))
  start=min(which(Eq0 != 0))
  Eq=Eq[start:nrow(Eq),]
  ERet=Ret[rownames(Eq),colnames(Eq)]


  Strategy=as.data.frame(rowSums(ERet[2:nrow(ERet),]*Eq[1:(nrow(Eq)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>(Volband* Strategyvol))& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(ERet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkdm=as.data.frame(statlev[,1])
  Eoutput=Eq[rownames(statlev),]*statlev
  Elong[rownames(Eoutput),]=Eoutput


  ##EM

  EMlong=EM*0
  EM0=rowSums(abs(EM))
  start=min(which(EM0 != 0))
  EM=EM[start:nrow(EM),]
  EMRet=Ret[rownames(EM),colnames(EM)]


  Strategy=as.data.frame(rowSums(EMRet[2:nrow(EMRet),]*EM[1:(nrow(EM)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>(Volband* Strategyvol))& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(EMRet)),nrow=length(kk))
  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkem=as.data.frame(statlev[,1])
  EMoutput=EM[rownames(statlev),]*statlev
  EMlong[rownames(EMoutput),]=EMoutput


  ##IR

  IRlong=IR*0
  IR0=rowSums(abs(IR))
  start=min(which(IR0 != 0))
  IR=IR[start:nrow(IR),]
  IRRet=Ret[rownames(IR),colnames(IR)]


  Strategy=as.data.frame(rowSums(IRRet[2:nrow(IRRet),]*IR[1:(nrow(IR)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>(Volband* Strategyvol))& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(IRRet)),nrow=length(kk))
  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkir=as.data.frame(statlev[,1])
  IRoutput=IR[rownames(statlev),]*statlev
  IRlong[rownames(IRoutput),]=IRoutput



  ##combine
  long=cbind(Elong,Clong*CWGT,EMlong*EMWGT,IRlong*IRWGT)

  long0=rowSums(abs(long))
  start=min(which(long0 != 0))
  long=long[start:nrow(long),]



  ###final
  fRet=Ret[rownames(long),colnames(long)]


  Strategy=as.data.frame(rowSums(fRet[2:nrow(fRet),]*long[1:(nrow(long)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>(Volband* Strategyvol))& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(fRet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkfinal=as.data.frame(statlev[,1])
  output=long[rownames(statlev),]*statlev
  giveup=list(output,kkcom,kkdm,kkem,kkir,kkfinal)
  return(giveup)


}

Assetcombineraw=function(Com,Eq,EM,IR,Ret,CWGT,EMWGT,IRWGT,RB1){
  statsd=130
  Volband=0.1
  Strategyvol=0.02
  Clong=Com*0
  Com0=rowSums(abs(Com))
  start=min(which(Com0 != 0))
  Com=Com[start:nrow(Com),]
  CRet=Ret[rownames(Com),colnames(Com)]


  Strategy=as.data.frame(rowSums(CRet[2:nrow(CRet),]*Com[1:(nrow(Com)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>(Volband* Strategyvol))& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(CRet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkcom=as.data.frame(statlev[,1])
  Coutput=Com[rownames(statlev),]*1
  Clong[rownames(Coutput),]=Coutput

  ##EQ

  Elong=Eq*0
  Eq0=rowSums(abs(Eq))
  start=min(which(Eq0 != 0))
  Eq=Eq[start:nrow(Eq),]
  ERet=Ret[rownames(Eq),colnames(Eq)]


  Strategy=as.data.frame(rowSums(ERet[2:nrow(ERet),]*Eq[1:(nrow(Eq)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>(Volband* Strategyvol))& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(ERet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkdm=as.data.frame(statlev[,1])
  Eoutput=Eq[rownames(statlev),]*1
  Elong[rownames(Eoutput),]=Eoutput


  ##EM

  EMlong=EM*0
  EM0=rowSums(abs(EM))
  start=min(which(EM0 != 0))
  EM=EM[start:nrow(EM),]
  EMRet=Ret[rownames(EM),colnames(EM)]


  Strategy=as.data.frame(rowSums(EMRet[2:nrow(EMRet),]*EM[1:(nrow(EM)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>(Volband* Strategyvol))& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(EMRet)),nrow=length(kk))
  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkem=as.data.frame(statlev[,1])
  EMoutput=EM[rownames(statlev),]*1
  EMlong[rownames(EMoutput),]=EMoutput


  ##IR

  IRlong=IR*0
  IR0=rowSums(abs(IR))
  start=min(which(IR0 != 0))
  IR=IR[start:nrow(IR),]
  IRRet=Ret[rownames(IR),colnames(IR)]


  Strategy=as.data.frame(rowSums(IRRet[2:nrow(IRRet),]*IR[1:(nrow(IR)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>(Volband* Strategyvol))& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(IRRet)),nrow=length(kk))
  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkir=as.data.frame(statlev[,1])
  IRoutput=IR[rownames(statlev),]*1
  IRlong[rownames(IRoutput),]=IRoutput



  ##combine
  long=cbind(Elong,Clong*CWGT,EMlong*EMWGT,IRlong*IRWGT)

  long0=rowSums(abs(long))
  start=min(which(long0 != 0))
  long=long[start:nrow(long),]



  ###final
  fRet=Ret[rownames(long),colnames(long)]


  Strategy=as.data.frame(rowSums(fRet[2:nrow(fRet),]*long[1:(nrow(long)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>(Volband* Strategyvol))& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(fRet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkfinal=as.data.frame(statlev[,1])
  output=long[rownames(statlev),]*1
  giveup=list(output,kkcom,kkdm,kkem,kkir,kkfinal)
  return(giveup)


}


AssetcombineCS4=function(Com,Eq,EM,IR,Ret,CWGT,EMWGT,IRWGT,RB1){
  statsd=130
  Volband=0.1
  Strategyvol=0.02
  Clong=Com*0
  Com0=rowSums(abs(Com))
  start=min(which(Com0 != 0))
  Com=Com[start:nrow(Com),]
  CRet=Ret[rownames(Com),colnames(Com)]


  Strategy=as.data.frame(rowSums(CRet[2:nrow(CRet),]*Com[1:(nrow(Com)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(CRet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkcom=as.data.frame(statlev[,1])
  Coutput=Com[rownames(statlev),]*1
  Clong[rownames(Coutput),]=Coutput

  ##EQ

  Elong=Eq*0
  Eq0=rowSums(abs(Eq))
  start=min(which(Eq0 != 0))
  Eq=Eq[start:nrow(Eq),]
  ERet=Ret[rownames(Eq),colnames(Eq)]


  Strategy=as.data.frame(rowSums(ERet[2:nrow(ERet),]*Eq[1:(nrow(Eq)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband*Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(ERet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkdm=as.data.frame(statlev[,1])
  Eoutput=Eq[rownames(statlev),]*1
  Elong[rownames(Eoutput),]=Eoutput


  ##EM

  EMlong=EM*0
  EM0=rowSums(abs(EM))
  start=min(which(EM0 != 0))
  EM=EM[start:nrow(EM),]
  EMRet=Ret[rownames(EM),colnames(EM)]


  Strategy=as.data.frame(rowSums(EMRet[2:nrow(EMRet),]*EM[1:(nrow(EM)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(EMRet)),nrow=length(kk))
  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkem=as.data.frame(statlev[,1])
  EMoutput=EM[rownames(statlev),]*1
  EMlong[rownames(EMoutput),]=EMoutput


  ##IR

  IRlong=IR*0
  IR0=rowSums(abs(IR))
  start=min(which(IR0 != 0))
  IR=IR[start:nrow(IR),]
  IRRet=Ret[rownames(IR),colnames(IR)]


  Strategy=as.data.frame(rowSums(IRRet[2:nrow(IRRet),]*IR[1:(nrow(IR)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(IRRet)),nrow=length(kk))
  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkir=as.data.frame(statlev[,1])
  IRoutput=IR[rownames(statlev),]*1
  IRlong[rownames(IRoutput),]=IRoutput



  ##combine
  long=cbind(Elong,Clong*CWGT,EMlong*EMWGT,IRlong*IRWGT)

  long0=rowSums(abs(long))
  start=min(which(long0 != 0))
  long=long[start:nrow(long),]



  ###final
  fRet=Ret[rownames(long),colnames(long)]


  Strategy=as.data.frame(rowSums(fRet[2:nrow(fRet),]*long[1:(nrow(long)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(fRet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkfinal=as.data.frame(statlev[,1])
  output=long[rownames(statlev),]*statlev
  giveup=list(output,kkcom,kkdm,kkem,kkir,kkfinal)
  return(giveup)


}



Assetcombine5=function(Com,Eq,EM,IR,Ret,CWGT,EMWGT,IRWGT,RB1,XX,XXWGT){
  statsd=130
  Volband=0.1
  Strategyvol=0.02
  Clong=Com*0
  Com0=rowSums(abs(Com))
  start=min(which(Com0 != 0))
  Com=Com[start:nrow(Com),]
  CRet=Ret[rownames(Com),colnames(Com)]


  Strategy=as.data.frame(rowSums(CRet[2:nrow(CRet),]*Com[1:(nrow(Com)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(CRet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkcom=as.data.frame(statlev[,1])
  Coutput=Com[rownames(statlev),]*statlev
  Clong[rownames(Coutput),]=Coutput

  ##EQ

  Elong=Eq*0
  Eq0=rowSums(abs(Eq))
  start=min(which(Eq0 != 0))
  Eq=Eq[start:nrow(Eq),]
  ERet=Ret[rownames(Eq),colnames(Eq)]


  Strategy=as.data.frame(rowSums(ERet[2:nrow(ERet),]*Eq[1:(nrow(Eq)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband*Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(ERet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkdm=as.data.frame(statlev[,1])
  Eoutput=Eq[rownames(statlev),]*statlev
  Elong[rownames(Eoutput),]=Eoutput


  ##EM

  EMlong=EM*0
  EM0=rowSums(abs(EM))
  start=min(which(EM0 != 0))
  EM=EM[start:nrow(EM),]
  EMRet=Ret[rownames(EM),colnames(EM)]


  Strategy=as.data.frame(rowSums(EMRet[2:nrow(EMRet),]*EM[1:(nrow(EM)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(EMRet)),nrow=length(kk))
  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkem=as.data.frame(statlev[,1])
  EMoutput=EM[rownames(statlev),]*statlev
  EMlong[rownames(EMoutput),]=EMoutput


  ##IR

  IRlong=IR*0
  IR0=rowSums(abs(IR))
  start=min(which(IR0 != 0))
  IR=IR[start:nrow(IR),]
  IRRet=Ret[rownames(IR),colnames(IR)]


  Strategy=as.data.frame(rowSums(IRRet[2:nrow(IRRet),]*IR[1:(nrow(IR)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(IRRet)),nrow=length(kk))
  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkir=as.data.frame(statlev[,1])
  IRoutput=IR[rownames(statlev),]*statlev
  IRlong[rownames(IRoutput),]=IRoutput





  ##combine
  long=cbind(Elong,Clong*CWGT,EMlong*EMWGT,IRlong*IRWGT)

  long0=rowSums(abs(long))
  start=min(which(long0 != 0))
  longCS1=long[start:nrow(long),]
  long=XX[rownames(longCS1),]*XXWGT+longCS1


  ###final
  fRet=Ret[rownames(long),colnames(long)]


  Strategy=as.data.frame(rowSums(fRet[2:nrow(fRet),]*long[1:(nrow(long)-1),],na.rm=TRUE))
  Strategyrisk=as.data.frame(Strategy[statsd:nrow(Strategy),1])

  for (i in 1:nrow(Strategyrisk)){
    Strategyrisk[i,1]=sd(Strategy[1:(i+statsd-1),1])*sqrt(260)
  }
  Strategyrisk1=as.data.frame(rollapplyr(Strategy, statsd, sd)*sqrt(260))
  Strategyrisk=(Strategyrisk1+Strategyrisk)/2
  rownames(Strategyrisk)=rownames(Strategy)[statsd:nrow(Strategy)]
  bufrisk=Strategyrisk*0
  bufrisk[1,]=Strategyrisk[1,]
  for(k in 2:nrow(Strategyrisk)){
    if((abs(Strategyrisk[k,1]-bufrisk[k-1,1])>Volband* Strategyvol)& wday(rownames(Strategyrisk)[k])==RB1){
      bufrisk[k,1]=Strategyrisk[k,1]
    } else{bufrisk[k,1]=bufrisk[k-1,1]}
  }
  kk=Strategyvol/bufrisk[,1]

  ###calcuate constant risk strategy
  statlev=matrix(rep(kk,ncol(fRet)),nrow=length(kk))

  rownames(statlev)=rownames(Strategy)[statsd:nrow(Strategy)]
  kkfinal=as.data.frame(statlev[,1])
  output=long[rownames(statlev),]*statlev
  giveup=list(output,kkcom,kkdm,kkem,kkir,kkfinal)
  return(giveup)


}

CPM=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign){
  RETfinal=RET
  for(statrun in 1:2){
    if (statrun==1){RET=CRet[,c("C","S","SB","SM","W","KC","CT")]}
    if (statrun==2){RET=CRet[,!(names(CRet) %in%c("C","S","SB","SM","W","KC","CT"))]}
    index=Cindex[,colnames(RET)]

    #index=as.data.frame(read.csv("D:/R/GRP/fut1price-com.csv", row.names=1,header=TRUE))
    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
    index=index[wday(rownames(index))==RB1,]

    minobs1=52
    minobs=260
    longlen=52
    shortlen=0
    Expanding=0

    nopos=0.4##middle section->neutral zone
    SDEV=12

    # WGT=c(0,0,0,1)
    # WGT2=WGT

    WGT=c(1/3,1/3,1/3)
    WGT2=c(1,1,0)/3

    CS=CSNUM
    if(CSpos==1){CS=CSpostest}
    # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1


    ##Magnitude
    Ret=RET
    Mag=index[(longlen+1):nrow(index),]
    obs=nrow(Mag)-1
    Mag=index[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/index[(1):(1+obs),]-1

    rownames(Mag)=rownames(index)[(longlen+1):nrow(index)]

    RVrank=Mag[(minobs):nrow(Mag),]*0

    RV=Mag


    ##Reliability
    ret=index[2:nrow(index),]/index[1:(nrow(index)-1),]-1

    STDEV=as.data.frame(rollapplyr(ret,longlen,sd))*sqrt(52)
    rownames(STDEV)=rownames(index)[(longlen+1):nrow(index)]
    STDEV1=STDEV[rownames(STDEV)%in%rownames(Mag),]


    RV=Mag#/STDEV1


    # STRV=-(index[2:nrow(index),]/index[1:(nrow(index)-1),]-1)
    #
    #
    # RV=STRV[52:nrow(STRV),]


    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSRelpos=CSRVpos
    TSRel=RV[(minobs1):nrow(RV),]

    TS1=TSRel*0
    TS1[TSRel[,]>(0)]=1
    TS1[TSRel[,]<(-0)]=-1
    #
    # TS1=TSRel*0
    # TS1[TSRel[,]>0.5]=1
    # TS1[TSRel[,]<(0.5)]=-1




    up=ret*0
    up[ret[,]>=0]=1
    Conroll=rollapplyr(up,longlen-shortlen,sum)/(longlen-shortlen)
    rownames(Conroll)=rownames(ret)[(longlen-shortlen):nrow(ret)]
    RV=as.data.frame(Conroll[1:(nrow(Conroll)-shortlen),])
    rownames(RV)=rownames(Mag)

    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSConpos=CSRVpos
    TSRel=RV[(minobs1):nrow(RV),]

    # TS1=TSRel*0
    # TS1[TSRel[,]>(0)]=1
    # TS1[TSRel[,]<(-0)]=-1
    #
    TS2=TSRel*0
    TS2[TSRel[,]>0.5]=1
    TS2[TSRel[,]<(0.5)]=-1





    ####Final Position
    TSRVL=TS1*WGT[1]+TS2*WGT[2]
    CSRVL=CSRelpos*WGT[1]+CSConpos*WGT2[2]
    #CSRV=CSConpos*WGT2[2]+CSRelpos*WGT2[1]



    ##3shortterm momentum
    longlen=52
    shortlen=35
    ##Magnitude
    Ret=RET
    Mag=index[(longlen+1):nrow(index),]
    obs=nrow(Mag)-1
    Mag=index[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/index[(1):(1+obs),]-1

    rownames(Mag)=rownames(index)[(longlen+1):nrow(index)]

    RVrank=Mag[(minobs):nrow(Mag),]*0

    RV=Mag


    ##Reliability
    ret=index[2:nrow(index),]/index[1:(nrow(index)-1),]-1

    STDEV=as.data.frame(rollapplyr(ret,longlen,sd))*sqrt(52)
    rownames(STDEV)=rownames(index)[(longlen+1):nrow(index)]
    STDEV1=STDEV[rownames(STDEV)%in%rownames(Mag),]


    RV=Mag#/STDEV1

    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSRelpos=CSRVpos
    TSRel=RV[(minobs1):nrow(RV),]

    TS1=TSRel*0
    TS1[TSRel[,]>(0)]=1
    TS1[TSRel[,]<(-0)]=-1
    #
    # TS1=TSRel*0
    # TS1[TSRel[,]>0.5]=1
    # TS1[TSRel[,]<(0.5)]=-1




    up=ret*0
    up[ret[,]>=0]=1
    Conroll=rollapplyr(up,longlen-shortlen,sum)/(longlen-shortlen)
    rownames(Conroll)=rownames(ret)[(longlen-shortlen):nrow(ret)]
    RV=as.data.frame(Conroll[1:(nrow(Conroll)-shortlen),])
    rownames(RV)=rownames(Mag)

    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSConpos=CSRVpos
    TSRel=RV[(minobs1):nrow(RV),]

    # TS1=TSRel*0
    # TS1[TSRel[,]>(0)]=1
    # TS1[TSRel[,]<(-0)]=-1
    #
    TS2=TSRel*0
    TS2[TSRel[,]>0.5]=1
    TS2[TSRel[,]<(0.5)]=-1





    # ####Final Position
    # TSRVSh=TS1*WGT[1]+TS2*WGT[2]
    # CSRVSh=CSRelpos*WGT[1]+CSConpos*WGT2[2]
    #
    #
    # TSRV=TSRVSh[rownames(TSRVL),]*0.5+TSRVL*1
    # CSRV=CSRVSh[rownames(CSRVL),]*0.5+CSRVL*1
    #


    ####Final Position
    TSRVSh=TS1*WGT[1]#+TS2*WGT[2]
    CSRVSh=CSRelpos*WGT[1]#+CSConpos*WGT2[2]


    TSRV=TSRVSh[rownames(TSRVL),]*1+TSRVL*1
    CSRV=CSRVSh[rownames(CSRVL),]*1+CSRVL*1

    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(CRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(CRet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp

  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal
  print(match.call()[[1]])
  name1=match.call()[[1]]

  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  ##name##

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))

    }
    setwd("D:/R/GRP")
  }

  functionoutput=factor(TSRV,CSRV,Ret,"week",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=1,rpname=name1)

  TStest=functionoutput[[1]]
  CStest=functionoutput[[2]]

  write.csv(  RAW(TStest,Ret),"TS.csv")
  write.csv(  RAW(CStest,Ret),"CS.csv")
  C_PM_TS=functionoutput[[1]]
  C_PM_CS=functionoutput[[2]]



  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EPM=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET, index,CSdesign,BETA=betamat){

  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=ERet[,1:10]}
    if (statrun==2){RET=ERet[,11:14]}
    index=Eindex[,colnames(RET)]

    ## Momentum

    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
    index=index[wday(rownames(index))==RB1,]

    minobs1=52
    minobs=260
    longlen=52
    shortlen=2
    Expanding=0

    nopos=0.4##middle section->neutral zone
    SDEV=12

    # WGT=c(0,0,0,1)
    # WGT2=WGT

    WGT=c(1/3,1/3,1/3)
    WGT2=c(1,1,0)/3

    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1


    ##Magnitude
    Ret=RET
    Mag=index[(longlen+1):nrow(index),]
    obs=nrow(Mag)-1
    Mag=index[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/index[(1):(1+obs),]-1

    rownames(Mag)=rownames(index)[(longlen+1):nrow(index)]

    RVrank=Mag[(minobs):nrow(Mag),]*0

    RV=Mag


    ##Reliability
    ret=index[2:nrow(index),]/index[1:(nrow(index)-1),]-1

    STDEV=as.data.frame(rollapplyr(ret,longlen,sd))*sqrt(52)
    rownames(STDEV)=rownames(index)[(longlen+1):nrow(index)]
    STDEV1=STDEV[rownames(STDEV)%in%rownames(Mag),]


    RV=Mag#/STDEV1


    # STRV=-(index[2:nrow(index),]/index[1:(nrow(index)-1),]-1)
    #
    #
    # RV=STRV[52:nrow(STRV),]


    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSRelpos=CSRVpos
    TSRel=RV[(minobs1):nrow(RV),]

    TS1=TSRel*0
    TS1[TSRel[,]>(0)]=1
    TS1[TSRel[,]<(-0)]=-1
    #
    # TS1=TSRel*0
    # TS1[TSRel[,]>0.5]=1
    # TS1[TSRel[,]<(0.5)]=-1




    up=ret*0
    up[ret[,]>=0]=1
    Conroll=rollapplyr(up,longlen-shortlen,sum)/(longlen-shortlen)
    rownames(Conroll)=rownames(ret)[(longlen-shortlen):nrow(ret)]
    RV=as.data.frame(Conroll[1:(nrow(Conroll)-shortlen),])
    rownames(RV)=rownames(Mag)

    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSConpos=CSRVpos
    TSRel=RV[(minobs1):nrow(RV),]

    # TS1=TSRel*0
    # TS1[TSRel[,]>(0)]=1
    # TS1[TSRel[,]<(-0)]=-1
    #
    TS2=TSRel*0
    TS2[TSRel[,]>0.5]=1
    TS2[TSRel[,]<(0.5)]=-1





    ####Final Position
    TSRVL=TS1*WGT[1]+TS2*WGT[2]
    CSRVL=CSRelpos*WGT[1]+CSConpos*WGT2[2]
    #CSRV=CSConpos*WGT2[2]+CSRelpos*WGT2[1]



    ##3shortterm momentum
    longlen=13
    ##Magnitude
    Ret=RET
    Mag=index[(longlen+1):nrow(index),]
    obs=nrow(Mag)-1
    Mag=index[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/index[(1):(1+obs),]-1

    rownames(Mag)=rownames(index)[(longlen+1):nrow(index)]

    RVrank=Mag[(minobs):nrow(Mag),]*0

    RV=Mag


    ##Reliability
    ret=index[2:nrow(index),]/index[1:(nrow(index)-1),]-1

    STDEV=as.data.frame(rollapplyr(ret,longlen,sd))*sqrt(52)
    rownames(STDEV)=rownames(index)[(longlen+1):nrow(index)]
    STDEV1=STDEV[rownames(STDEV)%in%rownames(Mag),]


    RV=Mag#/STDEV1

    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSRelpos=CSRVpos
    TSRel=RV[(minobs1):nrow(RV),]

    TS1=TSRel*0
    TS1[TSRel[,]>(0)]=1
    TS1[TSRel[,]<(-0)]=-1
    #
    # TS1=TSRel*0
    # TS1[TSRel[,]>0.5]=1
    # TS1[TSRel[,]<(0.5)]=-1




    up=ret*0
    up[ret[,]>=0]=1
    Conroll=rollapplyr(up,longlen-shortlen,sum)/(longlen-shortlen)
    rownames(Conroll)=rownames(ret)[(longlen-shortlen):nrow(ret)]
    RV=as.data.frame(Conroll[1:(nrow(Conroll)-shortlen),])
    rownames(RV)=rownames(Mag)

    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSConpos=CSRVpos
    TSRel=RV[(minobs1):nrow(RV),]

    # TS1=TSRel*0
    # TS1[TSRel[,]>(0)]=1
    # TS1[TSRel[,]<(-0)]=-1
    #
    TS2=TSRel*0
    TS2[TSRel[,]>0.5]=1
    TS2[TSRel[,]<(0.5)]=-1



    STRV=-(index[5:nrow(index),]/index[1:(nrow(index)-4),]-1)
    #
    #
    RV=STRV[52:nrow(STRV),]

    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSREVpos=CSRVpos
    STRV=-(index[2:nrow(index),]/index[1:(nrow(index)-1),]-1)
    #
    #
    RV=STRV[52:nrow(STRV),]

    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSREV2pos=CSRVpos


    ####Final Position
    TSRVSh=TS1*WGT[1]+TS2*WGT[2]
    CSRVSh=CSREVpos*0.5+CSREV2pos[rownames(CSREVpos),]



    TSRV=TSRVSh[rownames(TSRVL),]*0.5+TSRVL*1

    err<- as.data.frame(read.csv("D:/R/GRP/EPS.csv", row.names=1,header=TRUE))
    err3=err[2:nrow(err),]/err[1:(nrow(err)-1),]-1
    indexmon=Eindex[rownames(err),]
    retmon=indexmon[2:nrow(indexmon),]/indexmon[1:(nrow(indexmon)-1),]-1
    RV=err3-retmon
    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1

    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    CSRVmonthly=CSRV


    CSRV=CSRVSh
    TSRV=TSRV[rownames(CSRV),]





    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(ERet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(ERet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  CSRVtemp2=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]

  }
  CSRVtemp2[is.na(CSRVtemp2)]=0
  for (sss in 1:nrow(CSRVmonthly)){
    CSRVtemp2[rownames(CSRVtemp2)>=rownames(CSRVmonthly)[sss],1:ncol(Ret)]=CSRVmonthly[sss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp






  CSRV=CSRVtemp*0.5+CSRVtemp2


  Ret=RETfinal

  ##name##

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=factor(TSRV,CSRV,Ret,"week",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=1,rpname=name1,BETA=betamat)
  TStest=functionoutput[[1]]
  CStest=functionoutput[[2]]


  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  E_PM_TS=functionoutput[[1]]

  E_PM_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

CSS=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET, index,CSdesign){
  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=CRet[,c("C","S","SB","SM","W","KC","CT")]}
    if (statrun==2){RET=CRet[,!(names(CRet) %in%c("C","S","SB","SM","W","KC","CT"))]}
    index=Cindex[,colnames(RET)]



    setwd("D:/R/GRP")

    Ret=RET

    minobs1=12
    minobs=60
    ##RV
    setwd("D:/R/GRP")

    seasonal<-as.data.frame(read.csv("D:/R/GRP/seasonal.csv", row.names=1,header=TRUE))[,colnames(Ret)]

    carry <- as.data.frame(read.csv("D:/R/GRP/carry-com.csv", row.names=1,header=TRUE))[,colnames(Ret)]
    carry2 <- as.data.frame(read.csv("D:/R/GRP/carry-com2.csv", row.names=1,header=TRUE))[,colnames(Ret)]
    fundwgt=1
    statwgt=1

    minobs=500

    Expanding=0

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3,4,5)/15
    CS=CSNUM
    if(CSpos==1){CS=CSpostest}


    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    SMA=20
    LMA=250
    Lwindow=1125
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score
    Ret=RET
    seasonal[is.na(seasonal)]=0
    seasonal$mon=month(rownames(seasonal))
    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
    TSpos=fx*0
    colnames(TSpos)=colnames(Ret)
    TSpos$mon=month(rownames(TSpos))


    for(i in 1:11){
      TSpos[TSpos$mon==seasonal$mon[i],1:ncol(index)]=seasonal[i+1,1:ncol(index)]

    }
    TSpos[TSpos$mon==seasonal$mon[12],1:ncol(index)]=seasonal[1,1:ncol(index)]
    TSRV1=TSpos[,1:ncol(index)]*fundwgt



    short=0


    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

    carry$YM=as.yearmon(rownames(carry))
    carry$mon=month(rownames(carry))
    sss=intersect(rownames(carry),rownames(fx))
    fx=fx[sss,]
    bible=fx[61:nrow(fx),]*0
    colnames(bible)=colnames(Ret)
    statday1=as.yearmon(rownames(bible))+3/12
    statday=as.yearmon(rownames(fx))+3/12
    bible$YM=statday1
    bible$mon=month(bible$YM)


    # for (i in 1:nrow(bible)){
    #   ave=mean(colMeans(Ret[carry$YM<bible$YM[i]& carry$YM>=statday[1]&carry$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(carry[carry$YM<bible$YM[i]& carry$YM>=statday[1]&carry$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))#/colSds(as.matrix(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   #bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }

    for (i in 1:nrow(bible)){
      ave=(colMeans(carry[carry$YM<(bible$YM[i]) &carry$YM>=statday[i]&carry$mon!=bible$mon[i],1:ncol(index)],na.rm=TRUE))
      bible[i,1:ncol(index)]=(colMeans(carry[carry$YM<(bible$YM[i])& carry$YM>=statday[i]&carry$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))#/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i])& Ret$YM>=statday[i]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)

    }

    #
    # for (i in 1:60){
    #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }
    #
    # for (i in 61:nrow(bible)){
    #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }


    RV1=bible[,1:ncol(index)]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))

    bibleRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    bibleRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    bibleRVpos=bibleRV*0
    bibleRVpos[bibleRV[,]<=truecount]=-1
    bibleRVpos[bibleRV1[,]<=truecount]=1



    CSRV=bibleRVpos[,1:ncol(index)]
    rownames(CSRV)=rownames(fx)[(nrow(fx)-nrow(CSRV)+1):nrow(fx)]
    CSRVori=CSRV


    bibleTS1=bible[,1:ncol(index)]
    bibleTS=bibleTS1*0
    bibleTS[bibleTS1[]<(0)]=-1
    bibleTS[bibleTS1[]>(0)]=1

    TSRV2=bibleTS[,1:ncol(index)]
    rownames(TSRV2)=rownames(fx)[(nrow(fx)-nrow(TSRV2)+1):nrow(fx)]


    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

    carry$YM=as.yearmon(rownames(carry))
    carry$mon=month(rownames(carry))
    sss=intersect(rownames(carry),rownames(fx))
    fx=fx[sss,]
    bible=fx[61:nrow(fx),]*0
    colnames(bible)=colnames(Ret)
    statday1=as.yearmon(rownames(bible))+2/12
    statday=as.yearmon(rownames(fx))+2/12
    bible$YM=statday1
    bible$mon=month(bible$YM)


    # for (i in 1:nrow(bible)){
    #   ave=mean(colMeans(Ret[carry$YM<bible$YM[i]& carry$YM>=statday[1]&carry$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(carry[carry$YM<bible$YM[i]& carry$YM>=statday[1]&carry$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))#/colSds(as.matrix(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   #bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }

    for (i in 1:nrow(bible)){
      ave=(colMeans(carry[carry$YM<(bible$YM[i]) &carry$YM>=statday[i]&carry$mon!=bible$mon[i],1:ncol(index)],na.rm=TRUE))
      bible[i,1:ncol(index)]=(colMeans(carry[carry$YM<(bible$YM[i])& carry$YM>=statday[i]&carry$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))#/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i])& Ret$YM>=statday[i]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)

    }



    #
    # for (i in 1:60){
    #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }
    #
    # for (i in 61:nrow(bible)){
    #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }


    RV1=bible[,1:ncol(index)]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))

    bibleRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    bibleRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    bibleRVpos=bibleRV*0
    bibleRVpos[bibleRV[,]<=truecount]=-1
    bibleRVpos[bibleRV1[,]<=truecount]=1

    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

    CSRV2=bibleRVpos[,1:ncol(index)]
    rownames(CSRV2)=rownames(fx)[(nrow(fx)-nrow(CSRV2)+1):nrow(fx)]

    bibleTS1=bible[,1:ncol(index)]
    bibleTS=bibleTS1*0
    bibleTS[bibleTS1[]<(0)]=-1
    bibleTS[bibleTS1[]>(0)]=1

    TSRV1=bibleTS[,1:ncol(Ret)]
    rownames(TSRV1)=rownames(fx)[(nrow(fx)-nrow(TSRV1)+1):nrow(fx)]



    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

    Ret$YM=as.yearmon(rownames(Ret))
    Ret$mon=month(rownames(Ret))

    sss=intersect(rownames(Ret),rownames(fx))
    fx=fx[sss,]
    biblecv=fx[61:nrow(fx),]*0
    colnames(biblecv)=colnames(Ret)[1:ncol(index)]
    statday1=as.yearmon(rownames(biblecv))+1/12
    statday=as.yearmon(rownames(fx))+1/12
    biblecv$YM=statday1
    biblecv$YM=statday1
    biblecv$mon=month(biblecv$YM)



    for (i in 1:nrow(biblecv)){
      ave=mean(colMeans(Ret[Ret$YM<biblecv$YM[i]& Ret$YM>=statday[1]&Ret$mon==biblecv$mon[i],1:ncol(index)],na.rm=TRUE))
      biblecv[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<biblecv$YM[i]& Ret$YM>=statday[1]&Ret$mon==biblecv$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<biblecv$YM[i]& Ret$YM>=statday[1]& Ret$mon==biblecv$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
      biblecv[i,1:ncol(index)]=biblecv[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<biblecv$YM[i]& Ret$YM>=statday[1]&Ret$mon==biblecv$mon[i],1:ncol(index)]))
    }

    # for (i in 1:nrow(bible)){
    #   ave=(colMeans(Ret[Ret$YM<(bible$YM[i]) &Ret$YM>=statday[i]&Ret$mon!=bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i])& Ret$YM>=statday[i]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i])& Ret$YM>=statday[i]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #
    # }

    #
    # for (i in 1:60){
    #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }
    #
    # for (i in 61:nrow(bible)){
    #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }


    RV1=biblecv[,1:ncol(index)]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))

    bibleRVcv=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    bibleRV1cv=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    bibleRVposcv=bibleRVcv*0
    bibleRVposcv[bibleRVcv[,]<=truecount]=-1
    bibleRVposcv[bibleRV1cv[,]<=truecount]=1

    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

    CSRVcv=bibleRVposcv[,1:ncol(index)]
    rownames(CSRVcv)=rownames(fx)[(nrow(fx)-nrow(CSRVcv)+1):nrow(fx)]

    #####need to adjust due to month end rebalancing(get Nov on oct/31)

    #
    bibleTS1=biblecv[,1:ncol(index)]
    bibleTS=bibleTS1*0
    bibleTS[bibleTS1[]<(0)]=-1
    bibleTS[bibleTS1[]>(0)]=1

    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

    TSRV4=bibleTS[,1:ncol(index)]
    rownames(TSRV4)=rownames(fx)[(nrow(fx)-nrow(TSRV4)+1):nrow(fx)]


    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

    Ret$YM=as.yearmon(rownames(Ret))
    Ret$mon=month(rownames(Ret))

    sss=intersect(rownames(Ret),rownames(fx))
    fx=fx[sss,]
    biblecv=fx[61:nrow(fx),]*0
    colnames(biblecv)=colnames(Ret)[1:ncol(index)]
    statday1=as.yearmon(rownames(biblecv))+2/12
    statday=as.yearmon(rownames(fx))+2/12
    biblecv$YM=statday1
    biblecv$YM=statday1
    biblecv$mon=month(biblecv$YM)



    for (i in 1:nrow(biblecv)){
      ave=mean(colMeans(Ret[Ret$YM<biblecv$YM[i]& Ret$YM>=statday[1]&Ret$mon==biblecv$mon[i],1:ncol(index)],na.rm=TRUE))
      biblecv[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<biblecv$YM[i]& Ret$YM>=statday[1]&Ret$mon==biblecv$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<biblecv$YM[i]& Ret$YM>=statday[1]& Ret$mon==biblecv$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
      biblecv[i,1:ncol(index)]=biblecv[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<biblecv$YM[i]& Ret$YM>=statday[1]&Ret$mon==biblecv$mon[i],1:ncol(index)]))
    }

    # for (i in 1:nrow(bible)){
    #   ave=(colMeans(Ret[Ret$YM<(bible$YM[i]) &Ret$YM>=statday[i]&Ret$mon!=bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i])& Ret$YM>=statday[i]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i])& Ret$YM>=statday[i]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #
    # }

    #
    # for (i in 1:60){
    #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }
    #
    # for (i in 61:nrow(bible)){
    #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }


    RV1=biblecv[,1:ncol(index)]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))

    bibleRVcv=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    bibleRV1cv=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    bibleRVposcv=bibleRVcv*0
    bibleRVposcv[bibleRVcv[,]<=truecount]=-1
    bibleRVposcv[bibleRV1cv[,]<=truecount]=1

    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

    CSRVcv2=bibleRVposcv[,1:ncol(index)]
    rownames(CSRVcv2)=rownames(fx)[(nrow(fx)-nrow(CSRVcv2)+1):nrow(fx)]

    #####need to adjust due to month end rebalancing(get Nov on oct/31)






    #
    #
    #
    bibleTS1=biblecv[,1:ncol(index)]
    bibleTS=bibleTS1*0
    bibleTS[bibleTS1[]<(0)]=-1
    bibleTS[bibleTS1[]>(0)]=1

    TSRV3=bibleTS[,1:ncol(index)]
    rownames(TSRV3)=rownames(fx)[(nrow(fx)-nrow(TSRV3)+1):nrow(fx)]






    AAA=intersect(rownames(TSRV1),intersect(rownames(TSRV2),intersect(rownames(TSRV3),rownames(TSRV4))))
    TSRV1=TSRV1[AAA,]
    #TSRV=TSRV[AAA,]
    TSRV2=TSRV2[AAA,]
    TSRV3=TSRV3[AAA,]
    TSRV4=TSRV4[AAA,]
    TSRV=TSRV1+TSRV2+TSRV3+TSRV4


    AAA=intersect(rownames(TSRV),rownames(CSRV))
    AAA=intersect(AAA,rownames(CSRVcv))
    CSRV=CSRV[AAA,]
    CSRV2=CSRV2[AAA,]
    TSRV=TSRV[AAA,]
    CSRVcv=CSRVcv[AAA,]
    CSRVcv2=CSRVcv2[AAA,]


    CSRV=CSRV+CSRV2+CSRVcv+CSRVcv2

    Ret=RET


    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(CRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(CRet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal



  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,rpname=name1)


  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  C_SS_TS=functionoutput[[1]]
  C_SS_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

CCA=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign){

  ##RV
  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=CRet[,c("C","S","SB","SM","W","KC","CT")]}
    if (statrun==2){RET=CRet[,!(names(CRet) %in%c("C","S","SB","SM","W","KC","CT"))]}
    index=Cindex[,colnames(RET)]



    minobs1=52
    minobs=260

    Expanding=0

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3)/6

    CS=CSNUM # assets to long and short
    if(CSpos==1){CS=CSpostest}

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score
    Ret=RET

    carry <- as.data.frame(read.csv("D:/R/GRP/carry-com wk.csv", row.names=1,header=TRUE))[,1:14]
    rownames(carry)=as.Date(as.numeric(rownames(carry)),origin = "1899-12-30")
    carry3 <- as.data.frame(read.csv("D:/R/GRP/carry-com wk.csv", row.names=1,header=TRUE))[,15:28]
    rownames(carry3)=as.Date(as.numeric(rownames(carry3)),origin = "1899-12-30")


    RV=(carry[2:nrow(carry),]/carry[1:(nrow(carry)-1),])-(carry3[2:nrow(carry3),]/carry3[1:(nrow(carry3)-1),])


    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i


    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1

    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1
    # rownames(CSRVpos)=rownames(RV1)
    # #

    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions


    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1

    # RVrank=RV[(minobs1):nrow(RV),]
    # TSRV[RVrank[,]>(0)]=1
    # TSRV[RVrank[,]<(0)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #



    TSRV$mon=as.yearmon(rownames(TSRV))+1/12
    start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
    TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
    CSRVtemp=TSRVtemp
    for (ss in 1:nrow(TSRV)){
      TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
      CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
    }
    TSRVone=TSRVtemp
    CSRVone=CSRVtemp
    Ret=RET


    ##RV

    carry <- as.data.frame(read.csv("D:/R/GRP/carry-com.csv", row.names=1,header=TRUE))
    # fut1price <- as.data.frame(read.csv("D:/R/GRP/fut1price-com.csv", row.names=1,header=TRUE))
    # fut2price <- as.data.frame(read.csv("D:/R/GRP/fut2price-com.csv", row.names=1,header=TRUE))
    # expday <- as.data.frame(read.csv("D:/R/GRP/days-com.csv", row.names=1,header=TRUE))

    minobs1=12
    minobs=60

    Expanding=0

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3)/6

    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score


    # carry=(fut1price-fut2price)/fut2price/expday
    # fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
    # carry=carry[rownames(carry)%in%rownames(fx),]
    #carry=carry[wday(rownames(carry))==RB1,]
    Ret=RET




    RV=carry[12:nrow(carry),]#-rowMeans(carry[12:nrow(carry),])
    # MAM=matrix(rep(MA,ncol(Ret)),ncol=ncol(Ret))
    # for(i in length(MA):nrow(index)){
    #   RV[i,]=colSums(carry[(i-length(MA)+1):i,]*MAM)
    #
    # }
    # RV=RV[length(MA):nrow(index),]


    RVrank=RV[(minobs1):nrow(RV),]*0



    for(i in 1:(minobs-minobs1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i

    for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {

      RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
      RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    }#i

    # for(i in 1:(nrow(RV)-minobs1+1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i


    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1

    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRV=CSRVpos

    CSRV[is.na(CSRV)]=0
    #translate to positions

    TSRV=RVrank*0

    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # TSRV[RV1[,]>(0)]=1
    # TSRV[RV1[,]<(0)]=-1
    # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
    # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1
    # TSRV[RVrank[,]>0.95]=0
    # TSRV[RVrank[,]<0.05]=0

    # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
    # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1

    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #

    TSRV$mon=as.yearmon(rownames(TSRV))+1/12
    start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
    TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
    CSRVtemp=TSRVtemp
    for (ss in 1:nrow(TSRV)){
      TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
      CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
    }
    TSRVtwo=TSRVtemp
    CSRVtwo=CSRVtemp
    Ret=RET



    TSRV=TSRVone[intersect(rownames(TSRVone),rownames(TSRVtwo)),]*0.3+TSRVtwo[intersect(rownames(TSRVone),rownames(TSRVtwo)),]
    CSRV=CSRVone[intersect(rownames(CSRVone),rownames(CSRVtwo)),]*0.3+CSRVtwo[intersect(rownames(CSRVone),rownames(CSRVtwo)),]


    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(CRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(CRet)]


  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=factor(TSRV,CSRV,Ret,"week","notional",TSWGT,CSWGT,0,CSweek=1,IR=0,rpname=name1)
  TStest=functionoutput[[1]]
  CStest=functionoutput[[2]]

  write.csv(  RAW(TStest,Ret),"TS.csv")
  write.csv(  RAW(CStest,Ret),"CS.csv")


  C_CA_TS=functionoutput[[1]]
  C_CA_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}


CCA2=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign){

  ##RV
  setwd("D:/R/GRP")
  minobs1=12
  minobs=60
  Expanding=0

  nopos=0.4##middle section->neutral zone
  MA=c(1,2,3)/6
  minobs1=52
  minobs=260

  Expanding=0

  nopos=0.4##middle section->neutral zone
  MA=c(1,2,3)/6

  CS=CSNUM # assets to long and short
  if(CSpos==1){CS=CSpostest}

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=260
  statsd=260
  ##volupdate trigger
  Volband=0.1

  ##carry score
  Ret=RET

  carry <- as.data.frame(read.csv("D:/R/GRP/carry-com.csv", row.names=1,header=TRUE))
  # fut1price <- as.data.frame(read.csv("D:/R/GRP/fut1price-com.csv", row.names=1,header=TRUE))
  # fut2price <- as.data.frame(read.csv("D:/R/GRP/fut2price-com.csv", row.names=1,header=TRUE))
  # expday <- as.data.frame(read.csv("D:/R/GRP/days-com.csv", row.names=1,header=TRUE))

  minobs1=12
  minobs=60

  Expanding=0

  nopos=0.4##middle section->neutral zone
  MA=c(1,2,3)/6

  CS=CSNUM # assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=260
  statsd=260
  ##volupdate trigger
  Volband=0.1

  ##carry score


  # carry=(fut1price-fut2price)/fut2price/expday
  # fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  # carry=carry[rownames(carry)%in%rownames(fx),]
  #carry=carry[wday(rownames(carry))==RB1,]
  Ret=RET




  RV=carry[12:nrow(carry),]#-rowMeans(carry[12:nrow(carry),])
  # MAM=matrix(rep(MA,ncol(Ret)),ncol=ncol(Ret))
  # for(i in length(MA):nrow(index)){
  #   RV[i,]=colSums(carry[(i-length(MA)+1):i,]*MAM)
  #
  # }
  # RV=RV[length(MA):nrow(index),]


  RVrank=RV[(minobs1):nrow(RV),]*0



  for(i in 1:(minobs-minobs1)) {
    RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  }#i

  for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {

    RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
  }#i

  # for(i in 1:(nrow(RV)-minobs1+1)) {
  #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # }#i


  # truecount=round(rowSums(!is.na(RVrank))*CS)
  # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
  # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
  # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
  # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
  # CSRVpos=CSRV*0
  # CSRVpos[CSRV[,]<=truecount]=-1
  # CSRVpos[CSRV1[,]<=truecount]=1

  RV1=RV[(minobs1):nrow(RV),]
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1



  ##Final CS signal(weighted)
  CSRV=CSRVpos

  CSRV[is.na(CSRV)]=0
  #translate to positions


  TSRV=RVrank*0
  TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
  TSRV[RVrank[,]<((1-nopos)/2)]=-1

  # RVrank=RV[(minobs1):nrow(RV),]
  # TSRV[RVrank[,]>(0)]=1
  # TSRV[RVrank[,]<(0)]=-1
  # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
  # down=rep(((1-nopos)/2),ncol(TSRV))
  #
  # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
  # TSRV[1,is.na(TSRV[1,])]=0
  # for(i in 2:nrow(RVrank)){
  #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
  #   TSRV[i,is.na(TSRV[i,])]=0
  # }
  #



  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRVone=TSRVtemp
  CSRVone=CSRVtemp
  Ret=RET


  ##RV

  carry <- as.data.frame(read.csv("D:/R/GRP/carry-com2.csv", row.names=1,header=TRUE))
  # fut1price <- as.data.frame(read.csv("D:/R/GRP/fut1price-com.csv", row.names=1,header=TRUE))
  # fut2price <- as.data.frame(read.csv("D:/R/GRP/fut2price-com.csv", row.names=1,header=TRUE))
  # expday <- as.data.frame(read.csv("D:/R/GRP/days-com.csv", row.names=1,header=TRUE))

  minobs1=12
  minobs=60

  Expanding=0

  nopos=0.4##middle section->neutral zone
  MA=c(1,2,3)/6

  CS=CSNUM # assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=260
  statsd=260
  ##volupdate trigger
  Volband=0.1

  ##carry score


  # carry=(fut1price-fut2price)/fut2price/expday
  # fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  # carry=carry[rownames(carry)%in%rownames(fx),]
  #carry=carry[wday(rownames(carry))==RB1,]
  Ret=RET




  RV=carry[12:nrow(carry),]#-rowMeans(carry[12:nrow(carry),])
  # MAM=matrix(rep(MA,ncol(Ret)),ncol=ncol(Ret))
  # for(i in length(MA):nrow(index)){
  #   RV[i,]=colSums(carry[(i-length(MA)+1):i,]*MAM)
  #
  # }
  # RV=RV[length(MA):nrow(index),]


  RVrank=RV[(minobs1):nrow(RV),]*0



  for(i in 1:(minobs-minobs1)) {
    RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  }#i

  for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {

    RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
  }#i

  # for(i in 1:(nrow(RV)-minobs1+1)) {
  #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # }#i


  # truecount=round(rowSums(!is.na(RVrank))*CS)
  # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
  # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
  # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
  # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
  # CSRVpos=CSRV*0
  # CSRVpos[CSRV[,]<=truecount]=-1
  # CSRVpos[CSRV1[,]<=truecount]=1

  RV1=RV[(minobs1):nrow(RV),]
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1



  ##Final CS signal(weighted)
  CSRV=CSRVpos

  CSRV[is.na(CSRV)]=0
  #translate to positions

  RVrank=RV[(minobs1):nrow(RV),]
  TSRV=RVrank*0

  TSRV[RVrank[,]>(0)]=1
  TSRV[RVrank[,]<(0)]=-1
  # TSRV[RV1[,]>(0)]=1
  # TSRV[RV1[,]<(0)]=-1
  # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
  # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1
  # TSRV[RVrank[,]>0.95]=0
  # TSRV[RVrank[,]<0.05]=0

  # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
  # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1

  # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
  # down=rep(((1-nopos)/2),ncol(TSRV))
  #
  # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
  # TSRV[1,is.na(TSRV[1,])]=0
  # for(i in 2:nrow(RVrank)){
  #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
  #   TSRV[i,is.na(TSRV[i,])]=0
  # }
  #

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRVtwo=TSRVtemp
  CSRVtwo=CSRVtemp
  Ret=RET

  TSRV=TSRVone[intersect(rownames(TSRVone),rownames(TSRVtwo)),]*0.5+TSRVtwo[intersect(rownames(TSRVone),rownames(TSRVtwo)),]
  CSRV=CSRVone[intersect(rownames(CSRVone),rownames(CSRVtwo)),]*0.5+CSRVtwo[intersect(rownames(CSRVone),rownames(CSRVtwo)),]

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,IR=0,rpname=name1)
  TStest=functionoutput[[1]]
  CStest=functionoutput[[2]]

  write.csv(  RAW(TStest,Ret),"TS.csv")
  write.csv(  RAW(CStest,Ret),"CS.csv")


  C_CA_TS=functionoutput[[1]]
  C_CA_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

CCA3=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign){

  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=CRet[,c("C","S","SB","SM","W","KC","CT")]}
    if (statrun==2){RET=CRet[,!(names(CRet) %in%c("C","S","SB","SM","W","KC","CT"))]}
    index=Cindex[,colnames(RET)]

    ##RV
    setwd("D:/R/GRP")
    minobs1=12
    minobs=60
    Expanding=0

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3)/6
    minobs1=52
    minobs=260

    Expanding=0

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3)/6

    CS=CSNUM # assets to long and short
    if(CSpos==1){CS=CSpostest}

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score
    Ret=RET

    carry <- as.data.frame(read.csv("D:/R/GRP/carry-com.csv", row.names=1,header=TRUE))[,colnames(Ret)]
    # fut1price <- as.data.frame(read.csv("D:/R/GRP/fut1price-com.csv", row.names=1,header=TRUE))
    # fut2price <- as.data.frame(read.csv("D:/R/GRP/fut2price-com.csv", row.names=1,header=TRUE))
    # expday <- as.data.frame(read.csv("D:/R/GRP/days-com.csv", row.names=1,header=TRUE))

    minobs1=12
    minobs=60

    Expanding=0

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3)/6

    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score


    # carry=(fut1price-fut2price)/fut2price/expday
    # fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
    # carry=carry[rownames(carry)%in%rownames(fx),]
    #carry=carry[wday(rownames(carry))==RB1,]
    Ret=RET




    lag=0
    RV0=carry[(4):(nrow(carry)-lag),]
    rownames(RV0)=rownames(carry)[(1+lag+3):nrow(carry)]
    lag=1
    RV1=carry[(3):(nrow(carry)-lag),]
    rownames(RV1)=rownames(carry)[(1+lag+2):nrow(carry)]
    lag=2
    RV2=carry[(2):(nrow(carry)-lag),]
    rownames(RV2)=rownames(carry)[(1+lag+1):nrow(carry)]
    lag=3
    RV3=carry[(1):(nrow(carry)-lag),]
    rownames(RV3)=rownames(carry)[(1+lag):nrow(carry)]



    RV=RV0+RV1


    RVrank=RV[(minobs1):nrow(RV),]*0



    for(i in 1:(minobs-minobs1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i

    for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {

      RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
      RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    }#i

    # for(i in 1:(nrow(RV)-minobs1+1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i


    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1

    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRV=CSRVpos

    CSRV[is.na(CSRV)]=0
    #translate to positions


    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1

    # RVrank=RV[(minobs1):nrow(RV),]
    # TSRV[RVrank[,]>(0)]=1
    # TSRV[RVrank[,]<(0)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #



    TSRV$mon=as.yearmon(rownames(TSRV))+1/12
    start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
    TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
    CSRVtemp=TSRVtemp
    for (ss in 1:nrow(TSRV)){
      TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
      CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
    }
    TSRVone=TSRVtemp
    CSRVone=CSRVtemp
    Ret=RET


    ##RV

    carry <- as.data.frame(read.csv("D:/R/GRP/carry-com2.csv", row.names=1,header=TRUE))[,colnames(Ret)]
    # fut1price <- as.data.frame(read.csv("D:/R/GRP/fut1price-com.csv", row.names=1,header=TRUE))
    # fut2price <- as.data.frame(read.csv("D:/R/GRP/fut2price-com.csv", row.names=1,header=TRUE))
    # expday <- as.data.frame(read.csv("D:/R/GRP/days-com.csv", row.names=1,header=TRUE))

    minobs1=12
    minobs=60

    Expanding=0

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3)/6

    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score


    # carry=(fut1price-fut2price)/fut2price/expday
    # fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
    # carry=carry[rownames(carry)%in%rownames(fx),]
    #carry=carry[wday(rownames(carry))==RB1,]
    Ret=RET




    lag=0
    RV0=carry[(4):(nrow(carry)-lag),]
    rownames(RV0)=rownames(carry)[(1+lag+3):nrow(carry)]
    lag=1
    RV1=carry[(3):(nrow(carry)-lag),]
    rownames(RV1)=rownames(carry)[(1+lag+2):nrow(carry)]
    lag=2
    RV2=carry[(2):(nrow(carry)-lag),]
    rownames(RV2)=rownames(carry)[(1+lag+1):nrow(carry)]
    lag=3
    RV3=carry[(1):(nrow(carry)-lag),]
    rownames(RV3)=rownames(carry)[(1+lag):nrow(carry)]



    RV=RV0+RV1


    RVrank=RV[(minobs1):nrow(RV),]*0



    for(i in 1:(minobs-minobs1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i

    for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {

      RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
      RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    }#i

    # for(i in 1:(nrow(RV)-minobs1+1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i


    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1

    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRV=CSRVpos

    CSRV[is.na(CSRV)]=0
    #translate to positions

    RVrank=RV[(minobs1):nrow(RV),]
    TSRV=RVrank*0

    TSRV[RVrank[,]>(0)]=1
    TSRV[RVrank[,]<(0)]=-1
    # TSRV[RV1[,]>(0)]=1
    # TSRV[RV1[,]<(0)]=-1
    # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
    # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1
    # TSRV[RVrank[,]>0.95]=0
    # TSRV[RVrank[,]<0.05]=0

    # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
    # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1

    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #

    TSRV$mon=as.yearmon(rownames(TSRV))+1/12
    start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
    TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
    CSRVtemp=TSRVtemp
    for (ss in 1:nrow(TSRV)){
      TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
      CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
    }
    TSRVtwo=TSRVtemp
    CSRVtwo=CSRVtemp
    Ret=RET

    TSRV=TSRVone[intersect(rownames(TSRVone),rownames(TSRVtwo)),]*0.5+TSRVtwo[intersect(rownames(TSRVone),rownames(TSRVtwo)),]
    CSRV=CSRVone[intersect(rownames(CSRVone),rownames(CSRVtwo)),]*0.5+CSRVtwo[intersect(rownames(CSRVone),rownames(CSRVtwo)),]



    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(CRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(CRet)]
  Ret=RETfinal


  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,IR=0,rpname=name1)
  TStest=functionoutput[[1]]
  CStest=functionoutput[[2]]

  write.csv(  RAW(TStest,Ret),"TS.csv")
  write.csv(  RAW(CStest,Ret),"CS.csv")


  C_CA_TS=functionoutput[[1]]
  C_CA_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}


CVA=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign){


  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=CRet[,c("C","S","SB","SM","W","KC","CT")]}
    if (statrun==2){RET=CRet[,!(names(CRet) %in%c("C","S","SB","SM","W","KC","CT"))]}
    index=Cindex[,colnames(RET)]


    minobs1=52
    minobs=260

    Expanding=0

    nopos=0.6##middle section->neutral zone
    MA=c(1,2,3)/6

    CS=CSNUM # assets to long and short


    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score
    Ret=RET
    Retpos=Ret
    Retneg=Ret
    Retpos[Ret<0]=NA
    Retneg[Ret>0]=NA

    per=63
    STDpos=as.data.frame(rollapplyr(Retpos,per,sd,na.rm=TRUE))
    STDneg=as.data.frame(rollapplyr(Retneg,per,sd,na.rm=TRUE))

    rownames(STDpos)=rownames(Retpos)[(per):nrow(Retpos)]
    rownames(STDneg)=rownames(Retpos)[(per):nrow(Retpos)]

    RV=-STDpos+STDneg
    #RV=(-STDpos+STDneg)/(STDpos+STDneg)

    RV=RV[wday(rownames(RV))==RB1,]

    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i


    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1

    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1
    rownames(CSRVpos)=rownames(RV1)
    # #

    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions


    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1




    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(CRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(CRet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal


  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }


  #functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,rpname=name1)
  functionoutput=factor(TSRV,CSRV,Ret,"week",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=1,rpname=name1)
  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  C_VA_TS=functionoutput[[1]]
  C_VA_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}


CVA2=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign){

  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=CRet[,c("C","S","SB","SM","W","KC","CT")]}
    if (statrun==2){RET=CRet[,!(names(CRet) %in%c("C","S","SB","SM","W","KC","CT"))]}
    index=Cindex[,colnames(RET)]


    Ret=RET
    ##RV
    ##RV
    setwd("D:/R/GRP")
    compos <- as.data.frame(read.csv("D:/R/GRP/commo pos.csv", row.names=1,header=TRUE))[,colnames(Ret)]


    minobs1=12
    minobs=60

    Expanding=0

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3)/6

    CS=CSNUM


    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score

    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
    #compos1=compos[wday(rownames(compos))==RB1,]
    compos1=compos[rownames(compos)%in%rownames(fx),]
    compos1=compos1[rownames(compos1)>"1998-01-01",]
    Ret=RET


    #RV=-compos1+rowMeans(compos1,na.rm=TRUE)
    Zscore=(compos1[(12):nrow(compos1),]-as.data.frame(rollapplyr(compos1,12,mean)))/as.data.frame(rollapplyr(compos1,12,sd))
    rownames(Zscore)=rownames(compos1)[(12):nrow(compos1)]
    RV=-Zscore
    #RV=-Zscore[2:nrow(Zscore),]+Zscore[1:(nrow(Zscore)-1),]
    #RV[,c("XBW","SM","BO")]=NA

    RVrank=RV[(minobs1):nrow(RV),]*0


    #
    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i


    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1

    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRVone=CSRVpos
    CSRVone[is.na(CSRVone)]=0
    #translate to positions


    TSRVone=RVrank*0

    TSRVone[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRVone[RVrank[,]<((1-nopos)/2)]=-1
    # TSRVone[RV[(minobs1):nrow(RV),]>(2.5)]=1
    # TSRVone[RV[(minobs1):nrow(RV),]<(-2.5)]=-1

    #
    #
    # RV=-compos1[2:nrow(compos1),]+rowMeans(compos1[2:nrow(compos1),],na.rm=TRUE)
    #
    # # RV=-compos1[2:nrow(compos1),]+compos1[1:(nrow(compos1)-1),]
    #
    #
    # RVrank=RV[(minobs1):nrow(RV),]*0
    #
    #
    # #
    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i
    #
    # # for(i in 1:(nrow(RV)-minobs1+1)) {
    # #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    # #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # # }#i
    #
    #
    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1
    #
    # # RV1=RV[(minobs1):nrow(RV),]
    # # truecount=round(rowSums(!is.na(RV1))*CS)
    # # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # # CSRVpos=CSRV*0
    # # CSRVpos[CSRV[,]<=truecount]=-1
    # # CSRVpos[CSRV1[,]<=truecount]=1
    #
    #
    #
    # ##Final CS signal(weighted)
    # CSRVtwo=CSRVpos
    # CSRVtwo[is.na(CSRVtwo)]=0
    # #translate to positions
    #
    #
    # TSRVtwo=RVrank*0
    #
    # TSRVtwo[RVrank[,]>(nopos+(1-nopos)/2)]=1
    # TSRVtwo[RVrank[,]<((1-nopos)/2)]=-1

    CSRV=(CSRVone)*0.5
    TSRV=(TSRVone)*0.5

    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(CRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(CRet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal


  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  #functionoutput=factor(TSRV,CSRV,Ret,"week",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=1)
  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,rpname=name1)
  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  C_VA_TS=functionoutput[[1]]
  C_VA_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}


CVO=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign){
  ###############skew

  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=CRet[,c("C","S","SB","SM","W","KC","CT")]}
    if (statrun==2){RET=CRet[,!(names(CRet) %in%c("C","S","SB","SM","W","KC","CT"))]}
    index=Cindex[,colnames(RET)]


    fundwgt=1
    statwgt=1

    minobs1=52
    minobs=260

    Expanding=0

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3)/6

    CS=CSNUM # assets to long and short
    if(CSpos==1){CS=CSpostest}
    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score
    Ret=RET
    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
    index=index[wday(rownames(index))==RB1,]

    ret=index[2:nrow(index),]/index[1:(nrow(index)-1),]-1



    STDEV=as.data.frame(rollapplyr(ret,52,skewness))

    rownames(STDEV)=rownames(ret)[(52):nrow(ret)]

    RV=-STDEV



    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i


    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1

    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1
    # rownames(CSRVpos)=rownames(RV1)
    # #

    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions


    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #




    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(CRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(CRet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=factor(TSRV,CSRV,Ret,"week",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=1,rpname=name1)


  TStest=functionoutput[[1]]
  CStest=functionoutput[[2]]

  write.csv(  RAW(TStest,Ret),"TS.csv")
  write.csv(  RAW(CStest,Ret),"CS.csv")
  C_VO_TS=functionoutput[[1]]
  C_VO_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

CVA3=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign){

  ##RV
  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=CRet[,c("C","S","SB","SM","W","KC","CT")]}
    if (statrun==2){RET=CRet[,!(names(CRet) %in%c("C","S","SB","SM","W","KC","CT"))]}
    index=Cindex[,colnames(RET)]

    Ret=RET
    fut1price<- as.data.frame(read.csv("D:/R/GRP/fut1price-com.csv", row.names=1,header=TRUE))[,colnames(Ret)]
    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
    fut1price=fut1price[rownames(fut1price)%in%rownames(fx),]


    minobs1=12
    minobs=60

    Expanding=0

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3)/6

    CS=CSNUM
    if(CSpos==1){CS=CSpostest}
    SMA=1
    LMA=12
    Lwindow=54
    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score
    Ret=RET



    shortma=rollapplyr(fut1price,SMA,mean)
    rownames(shortma)=rownames(fut1price)[SMA:nrow(fut1price)]
    longma=rollapplyr(fut1price,LMA,mean)
    rownames(longma)=rownames(fut1price)[LMA:nrow(fut1price)]

    longma1=longma[1:(nrow(longma)-Lwindow+1),]
    rownames(longma1)=rownames(longma)[Lwindow:nrow(longma)]
    shortma=shortma[rownames(shortma)%in%rownames(longma1),]

    Rvalue=(longma1/shortma)-1


    RV=(Rvalue-rowMeans(Rvalue))

    RVrank=RV[(minobs1):nrow(RV),]*0



    for(i in 1:(minobs-minobs1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i

    for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {

      RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
      RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    }#i

    # for(i in 1:(nrow(RV)-minobs1+1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i

    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1

    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1
    rownames(CSRVpos)=rownames(RV1)


    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions


    TSRV=as.data.frame(RVrank*0)
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1

    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #




    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(CRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(CRet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }


  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,rpname=name1)
  # functionoutput=factor(TSRV,CSRV,Ret,"week",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=1,rpname=name1)
  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  C_VA_TS=functionoutput[[1]]
  C_VA_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}




EIS=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign){

  ##RV
  setwd("D:/R/GRP")

  GV<-as.data.frame(read.csv("D:/R/GRP/isi.csv", row.names=1,header=TRUE))




  minobs1=12
  minobs=60

  Expanding=0
  weeklyTS=1
  nopos=0.40##middle section->neutral zone

  per=3
  CS=CSNUM # assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=12
  assetsd=12
  statsd=12
  ##volupdate trigger
  Volband=0.1

  ##carry score
  Ret=RET
  sent=-GV


  RV=sent#-rowMeans(sent1,na.rm=TRUE)

  RVrank=RV[(minobs1):nrow(RV),]*0



  # # for(i in 1:(minobs-minobs1)) {
  # #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  # #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # # }#i
  # #
  # # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
  # #
  # #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
  # #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
  # # }#i
  #
  # for(i in 1:(nrow(RV)-minobs1+1)) {
  #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # }#i
  #


  # truecount=round(rowSums(!is.na(RVrank))*CS)
  # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
  # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
  # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
  # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
  # CSRVpos=CSRV*0
  # CSRVpos[CSRV[,]<=truecount]=-1
  # CSRVpos[CSRV1[,]<=truecount]=1
  #


  RV1=RV[(minobs1):nrow(RV),]
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1
  #


  ##Final CS signal(weighted)
  CSRV=-CSRVpos
  CSRV[is.na(CSRV)]=0
  #translate to positions
  RVrank=RV1
  TSRV=RVrank*0
  TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
  TSRV[RVrank[,]<((1-nopos)/2)]=-1
  TSRV[RVrank[,]>(0)]=1
  TSRV[RVrank[,]<(0)]=-1
  # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
  # down=rep(((1-nopos)/2),ncol(TSRV))
  #
  # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
  # TSRV[1,is.na(TSRV[1,])]=0
  # for(i in 2:nrow(RVrank)){
  #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
  #   TSRV[i,is.na(TSRV[i,])]=0
  # }
  #



  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RET
  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1)

  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  E_IS_TS=functionoutput[[1]]
  E_Is_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EVO=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat){

  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=ERet[,1:10]}
    if (statrun==2){RET=ERet[,11:14]}
    index=Eindex[,colnames(RET)]



    ivol<-as.data.frame(read.csv("D:/R/GRP/ivol.csv", row.names=1,header=TRUE))[,colnames(RET)]
    ivol=ivol[rownames(ivol)>"2001-3-31",]


    MA=1
    minobs1=12
    minobs=60
    longlen=12
    shortlen=1
    Expanding=0

    nopos=0.4##middle section->neutral zone
    SDEV=20

    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    Ret=RET
    #ivol1=ivol[MA:nrow(ivol),]-rollapplyr(ivol,MA,mean)
    ivol1=ivol[2:(nrow(ivol)),]-ivol[1:(nrow(ivol)-1),]


    delay2=0
    ivol2=ivol1[1:(nrow(ivol1)-delay2),]
    rownames(ivol2)=rownames(ivol1[(delay2+1):nrow(ivol1),])

    RV=ivol2-rowMeans(ivol2,na.rm=TRUE)

    RVrank=RV[(minobs1):nrow(RV),]*0



    for(i in 1:(minobs-minobs1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i

    for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {

      RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
      RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    }#i

    # for(i in 1:(nrow(RV)-minobs1+1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #



    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1
    #
    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1



    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions

    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #


    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(ERet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(ERet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal


  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1,BETA=betamat)

  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  E_VO_TS=functionoutput[[1]]
  E_VO_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

ESS=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat){

  ##RV

  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=ERet[,1:10]}
    if (statrun==2){RET=ERet[,11:14]}
    index=Eindex[,colnames(RET)]


    fundwgt=1
    statwgt=1

    minobs=500

    Expanding=1


    short=0.2

    day1=24#rebalance
    day2=7

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3,4,5)/15

    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02

    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score
    Ret=RET
    cal <- create.calendar("Actual",weekdays=c("saturday", "sunday"))
    TOM=as.data.frame(day(add.bizdays(rownames(Ret),1,cal)))
    rownames(TOM)=rownames(Ret)
    TOM2=TOM*0-1*short

    TOM2[TOM[,1]>=day1,1]=1
    # TOM2[TOM[,1]==1 & wday(rownames(TOM))!=3,1]=1
    # TOM2[TOM[,1]==2 & wday(rownames(TOM))!=3& wday(rownames(TOM))!=4,1]=1
    # TOM2[TOM[,1]==3 & wday(rownames(TOM))!=3& wday(rownames(TOM))!=4& wday(rownames(TOM))!=5,1]=1
    # TOM2[TOM[,1]==4 & wday(rownames(TOM))!=3& wday(rownames(TOM))!=4& wday(rownames(TOM))!=5& wday(rownames(TOM))!=6,1]=1
    # TOM2[TOM[,1]==5 & wday(rownames(TOM))!=3& wday(rownames(TOM))!=4& wday(rownames(TOM))!=5& wday(rownames(TOM))!=6& wday(rownames(TOM))!=7,1]=1
    # TOM2[TOM[,1]==6 & wday(rownames(TOM))==2,1]=1

    SIG=Ret*0+1
    SIG=SIG*TOM2[,1]

    # FOMC <- as.data.frame(read.csv("D:/R/GRP/FOMC2.csv", row.names=1,header=TRUE))
    # FOMCDM=TOM2*0
    # FOMCEM=TOM2*0
    # FOMCDM[as.Date(rownames(FOMCDM))%in%add.bizdays(rownames(FOMC),-2,cal),1]=1
    # FOMCEM[as.Date(rownames(FOMCEM))%in%add.bizdays(rownames(FOMC),-1,cal),1]=1
    #
    # SIG2=Ret*0
    # SIG2[,1:10]=FOMCDM
    # SIG2[,11:14]=FOMCEM
    #
    TSRV1=SIG*fundwgt#+SIG2

    short=0


    CSRV=index*0
    statday=unique(as.yearmon(rownames(Ret))+1/12)
    bible=as.data.frame(matrix(0,nrow=(length(statday)-36),ncol=ncol(index)))
    bible$YM=statday[(36+1-short):(length(statday)-short)]
    bible$mon=month(bible$YM)
    Ret$YM=as.yearmon(rownames(Ret))
    Ret$mon=month(rownames(Ret))

    # for (i in 1:nrow(bible)){
    #   ave=mean(colMeans(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }

    for (i in 1:nrow(bible)){
      ave=(colMeans(Ret[Ret$YM<(bible$YM[i]) &Ret$YM>=statday[i]&Ret$mon!=bible$mon[i],1:ncol(index)],na.rm=TRUE))
      bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i])& Ret$YM>=statday[i]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i])& Ret$YM>=statday[i]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)

    }

    #
    # for (i in 1:60){
    #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }
    #
    # for (i in 61:nrow(bible)){
    #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }


    RV1=bible[,1:ncol(index)]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))

    bibleRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    bibleRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    bibleRVpos=bibleRV*0
    bibleRVpos[bibleRV[,]<=truecount]=-1
    bibleRVpos[bibleRV1[,]<=truecount]=1

    CSRV=CSRV[as.yearmon(rownames(CSRV))>=bible$YM[1],]

    #####need to adjust due to month end rebalancing(get Nov on oct/31)
    for(i in 1:nrow(bible)){
      CSRV[as.yearmon(rownames(CSRV))==(bible$YM[i]-1/12),1:ncol(index)]=bibleRVpos[i,1:ncol(index)]*statwgt
    }


    bibleTS1=bible[,1:ncol(index)]
    bibleTS=bibleTS1*0
    bibleTS[bibleTS1[]<(-0.5)]=-1
    bibleTS[bibleTS1[]>(0.5)]=1
    TSRV=CSRV*0
    for(i in 1:nrow(bible)){
      TSRV[as.yearmon(rownames(TSRV))==bible$YM[i],1:ncol(index)]=bibleTS[i,1:ncol(index)]
    }

    AAA=intersect(rownames(TSRV1),rownames(TSRV))
    TSRV1=TSRV1[AAA,]
    TSRV=TSRV[AAA,]

    TSRV=TSRV1*1+TSRV*0
    AAA=intersect(rownames(TSRV),rownames(CSRV))
    CSRV=CSRV[AAA,]
    TSRV=TSRV[AAA,]


    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(ERet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(ERet)]



  print(match.call()[[1]])
  name1=match.call()[[1]]
  Ret=RETfinal
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,FALSE,CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,rpname=name1,BETA=betamat)


  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  E_SS_TS=functionoutput[[1]]
  E_SS_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EEM=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat){


  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=ERet[,1:10]}
    if (statrun==2){RET=ERet[,11:14]}
    index=Eindex[,colnames(RET)]

    minobs1=12
    minobs=60

    Expanding=0

    nopos=0.4##middle section->neutral zone


    CS=CSNUM # assets to long and short


    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=12
    assetsd=12
    statsd=12
    ##volupdate trigger
    Volband=0.1
    err<- as.data.frame(read.csv("D:/R/GRP/ERR.csv", row.names=1,header=TRUE))[,colnames(RET)]

    Ret=RET
    longlen=12
    shortlen=0
    Mag=err[(longlen+1):nrow(err),]-as.data.frame(rollapplyr(err,longlen+1,mean))
    #Mag=as.data.frame(rollapplyr(err,longlen+1,mean))
    obs=nrow(Mag)-1
    # Mag=err[(1+longlen-shortlen):(1+longlen-shortlen+obs),]-err[(1):(1+obs),]-1

    rownames(Mag)=rownames(err)[(longlen+1):nrow(err)]



    RV=err


    ##Reliability

    STDEV=as.data.frame(rollapplyr(Mag,6,mean))
    rownames(STDEV)=rownames(Mag)[(6):nrow(Mag)]
    STDEV1=STDEV[rownames(STDEV)%in%rownames(Mag),]

    lag=0


    RV=STDEV1
    RV1=RV[1:(nrow(RV)-lag),]
    rownames(RV1)=rownames(RV)[(1+lag):nrow(RV)]
    RV=RV1


    #RV=err[4:nrow(err),]-err[1:(nrow(err)-3),]

    RVrank=RV[(minobs1):nrow(RV),]*0

    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i
    #

    #
    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1


    #
    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1





    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions



    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #




    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(ERet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(ERet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal


  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1,BETA=betamat)

  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  E_EM_TS=functionoutput[[1]]
  E_EM_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EPE=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat){

  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=ERet[,1:10]}
    if (statrun==2){RET=ERet[,11:14]}
    index=Eindex[,colnames(RET)]

    yield <- as.data.frame(read.csv("D:/R/GRP/10Yield.csv", row.names=1,header=TRUE))[,colnames(RET)]
    EPS <- as.data.frame(read.csv("D:/R/GRP/EPS.csv", row.names=1,header=TRUE))[,colnames(RET)]
    EPS1 <- as.data.frame(read.csv("D:/R/GRP/EPS1.csv", row.names=1,header=TRUE))[,colnames(RET)]

    index1 <- as.data.frame(read.csv("D:/R/GRP/priceindex-mom.csv", row.names=1,header=TRUE))[,colnames(RET)]

    minobs1=12
    minobs=60

    Expanding=0

    nopos=0.4##middle section->neutral zone


    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=12
    assetsd=12
    statsd=12
    ##volupdate trigger
    Volband=0.1

    ##carry score

    Ret=RET

    ###
    # DPS=DPS[rownames(DPS)>="2004-01-30",]
    # yield=yield[rownames(yield)>="2004-01-30",]




    EY=(EPS)
    EYD=(EPS1)

    Rvalue=EY/index1[rownames(EY),]

    RV=Rvalue

    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i


    #
    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    #
    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions

    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #

    CSRV6=CSRV
    TSRV6=TSRV

    Rvalue=EY/EYD


    RV=Rvalue


    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i


    #
    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    #
    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions

    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #
    CSRV=CSRV+CSRV6
    TSRV=TSRV#+TSRV6

    #

    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(ERet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(ERet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1,BETA=betamat)

  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  E_PE_TS=functionoutput[[1]]
  E_PE_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

ELQ=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat){

  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=ERet[,1:10]}
    if (statrun==2){RET=ERet[,11:14]}
    index=Eindex[,colnames(RET)]

    ##RV


    fx<-as.data.frame(read.csv("D:/R/GRP/m2gdp.csv", row.names=1,header=TRUE))[,colnames(RET)]

    minobs1=12
    minobs=60
    longlen=6
    shortlen=0
    Expanding=0

    nopos=0.4##middle section->neutral zone
    SDEV=12

    # WGT=c(0,0,0,1)
    # WGT2=WGT

    WGT=c(0,1)
    WGT2=WGT

    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=12
    assetsd=12
    statsd=12
    ##volupdate trigger
    Volband=0.1


    ##Magnitude

    Mag=fx[(longlen+1):nrow(fx),]
    obs=nrow(Mag)-1
    Mag=fx[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/fx[(1):(1+obs),]-1

    rownames(Mag)=rownames(fx)[(longlen+1):nrow(fx)]

    RV=(Mag)
    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i


    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1

    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1

    Magrank=RVrank
    CSMagpos=CSRVpos



    ##Reliability
    Ret=RET
    ret=fx[2:nrow(fx),]/fx[1:(nrow(fx)-1),]-1
    STDEV=as.data.frame(rollapplyr(ret,longlen,sd))*sqrt(12)
    rownames(STDEV)=rownames(fx)[(longlen+1):nrow(fx)]
    STDEV1=STDEV[rownames(Mag)%in%rownames(fx)[(1+longlen):(1+longlen+obs)],]


    RV=(Mag)/STDEV1

    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i



    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1

    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSRelpos=CSRVpos


    ##Final CS signal(weighted)
    CSRV=CSRelpos*WGT2[2]+CSMagpos*WGT2[1]

    #translate to positions



    TS1=Magrank*0
    TS1[Magrank[,]>(nopos+(1-nopos)/2)]=1
    TS1[Magrank[,]<((1-nopos)/2)]=-1


    TS2=Relrank*0
    TS2[Relrank[,]>(nopos+(1-nopos)/2)]=1
    TS2[Relrank[,]<((1-nopos)/2)]=-1


    # TS1=Magrank*0
    #
    #
    # up=rep((nopos+(1-nopos)/2),ncol(TS1))
    # down=rep(((1-nopos)/2),ncol(TS1))
    #
    # TS1[1,]=(Magrank[1,]>=(up))*1+-1*(Magrank[1,]<=(down))
    # for(i in 2:nrow(Magrank)){
    #   TS1[i,]=(Magrank[i,]>=(up-(TS1[i-1,]>0)*0.025))*1+(Magrank[i,]<=(down+(TS1[i-1,]<0)*0.025))*-1
    #
    # }
    #
    # TS2=Magrank*0
    #
    # TS2[1,]=(Relrank[1,]>=(up))*1+-1*(Relrank[1,]<=(down))
    # for(i in 2:nrow(Relrank)){
    #   TS2[i,]=(Relrank[i,]>=(up-(TS2[i-1,]>0)*0.025))*1+(Relrank[i,]<=(down+(TS2[i-1,]<0)*0.025))*-1
    #
    # }
    #



    ####Final Position
    TSRV=TS1*WGT[1]+TS2*WGT[2]



    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(ERet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(ERet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1,BETA=betamat)

  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  E_LQ_TS=functionoutput[[1]]
  E_LQ_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

ECA=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat){
  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=ERet[,1:10]}
    if (statrun==2){RET=ERet[,11:14]}
    index=Eindex[,colnames(RET)]

    ##RV
    carry <- as.data.frame(read.csv("D:/R/GRP/carry-dm.csv", row.names=1,header=TRUE))[,colnames(RET)]
    carry[,"DAX"]=NA
    # fut1price <- as.data.frame(read.csv("D:/R/GRP/FutGenNone1.csv", row.names=1,header=TRUE))
    # fut2price <- as.data.frame(read.csv("D:/R/GRP/FutGenNone2.csv", row.names=1,header=TRUE))
    # expday <- as.data.frame(read.csv("D:/R/GRP/fut1expiry.csv", row.names=1,header=TRUE))




    minobs1=12
    minobs=60

    Expanding=0

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3)/6

    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score


    # carry=(fut1price-fut2price)/fut2price/expday
    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
    # carry=carry[rownames(carry)%in%rownames(fx),]
    Ret=RET

    index=index[rownames(index)%in%rownames(fx),]
    ret=index[2:nrow(index),]/index[1:(nrow(index)-1),]-1


    RV=carry[12:nrow(carry),]


    # MAM=matrix(rep(MA,ncol(Ret)),ncol=ncol(Ret))
    # for(i in length(MA):nrow(index)){
    #   RV[i,]=colSums(carry[(i-length(MA)+1):i,]*MAM)
    #
    # }
    # RV=RV[length(MA):nrow(index),]


    RVrank=RV[(minobs1):nrow(RV),]*0


    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i



    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1

    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions

    TSRV=RVrank*0

    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
    # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1
    # TSRV[RVrank[,]>0.95]=0
    # TSRV[RVrank[,]<0.05]=0

    # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
    # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1

    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #


    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(ERet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(ERet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,rpname=name1,BETA=betamat)

  TStest=functionoutput[[1]]
  CStest=functionoutput[[2]]

  write.csv(  RAW(TStest,Ret),"TS.csv")
  write.csv(  RAW(CStest,Ret),"CS.csv")
  E_CA_TS=functionoutput[[1]]
  E_CA_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EQL=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat){


  ##RV

  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=ERet[,1:10]}
    if (statrun==2){RET=ERet[,11:14]}
    index=Eindex[,colnames(RET)]



    roa <- as.data.frame(read.csv("D:/R/GRP/ROA.csv", row.names=1,header=TRUE))[,colnames(RET)]
    icr <- as.data.frame(read.csv("D:/R/GRP/ICR.csv", row.names=1,header=TRUE))[,colnames(RET)]

    Ret=RET


    minobs1=12
    minobs=60

    Expanding=0

    nopos=0.4##middle section->neutral zone


    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=12
    assetsd=12
    statsd=12
    ##volupdate trigger
    Volband=0.1



    RV1=roa

    # lag=13
    # RV=-as.data.frame(rollapplyr(RV1,lag,sd,na.rm=TRUE))
    # rownames(RV)=rownames(RV1)[lag:nrow(RV1)]
    lag=1
    RV=(RV1[(1+lag):nrow(RV1),]-RV1[(1):(nrow(RV1)-lag),])

    TD=RV


    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i

    #
    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    #
    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions
    CSRVone=CSRV



    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #

    TSRVone=TSRV






    # lag=13
    # RV=-as.data.frame(rollapplyr(RV1,lag,sd,na.rm=TRUE))
    # rownames(RV)=rownames(RV1)[lag:nrow(RV1)]

    RV=icr
    lag=1
    RV1=icr
    RV=(RV1[(1+lag):nrow(RV1),]-RV1[(1):(nrow(RV1)-lag),])
    RV=RV[rownames(TD),]



    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i


    #
    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    #
    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0

    CSRVtwo=CSRV
    #translate to positions


    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #
    TSRVtwo=TSRV



    TSRV=(2*TSRVone+TSRVtwo)/3
    CSRV=(CSRVone+2*CSRVtwo)/3

    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(ERet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(ERet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal


  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1,BETA=betamat)

  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  E_QL_TS=functionoutput[[1]]
  E_QL_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EDY=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat){
  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=ERet[,1:10]}
    if (statrun==2){RET=ERet[,11:14]}
    index=Eindex[,colnames(RET)]

    ##RV


    index1 <- as.data.frame(read.csv("D:/R/GRP/priceindex-mom.csv", row.names=1,header=TRUE))[,colnames(RET)]
    yield <- as.data.frame(read.csv("D:/R/GRP/10Yield.csv", row.names=1,header=TRUE))[,colnames(RET)]
    DPS <- as.data.frame(read.csv("D:/R/GRP/DPS.csv", row.names=1,header=TRUE))[,colnames(RET)]
    DPS1 <- as.data.frame(read.csv("D:/R/GRP/DPS1.csv", row.names=1,header=TRUE))[,colnames(RET)]


    minobs1=12
    minobs=60

    Expanding=0

    nopos=0.4##middle section->neutral zone


    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=12
    assetsd=12
    statsd=12
    ##volupdate trigger
    Volband=0.1

    ##carry score

    Ret=RET

    ###
    # DPS=DPS[rownames(DPS)>="2004-01-30",]
    # yield=yield[rownames(yield)>="2004-01-30",]
    DPS[is.na(DPS)]=DPS1[is.na(DPS)]


    DYP=index1[rownames(DPS),]
    DY=DPS/DYP

    Rvalue=DY-yield/100


    RV=Rvalue


    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i



    #
    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    #
    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions


    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #
    ###convert monthly to daily signals##########

    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(ERet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(ERet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1,BETA=betamat)

  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  E_DY_TS=functionoutput[[1]]
  E_DY_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EST=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat){

  ##RV
  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=ERet[,1:10]}
    if (statrun==2){RET=ERet[,11:14]}
    index=Eindex[,colnames(RET)]

    GV<-as.data.frame(read.csv("D:/R/GRP/growthvalue.csv", row.names=1,header=TRUE))

    minobs1=12
    minobs=60

    Expanding=0
    weeklyTS=1
    nopos=0.40##middle section->neutral zone

    per=3
    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=12
    assetsd=12
    statsd=12
    ##volupdate trigger
    Volband=0.1

    ##carry score
    Ret=RET

    sent=GV[(1+per):nrow(GV),]/GV[(1):(nrow(GV)-per),]-1
    sent1=sent[,1:14]-sent[,15:28]
    sent1=sent1[,colnames(RET)]
    # sent2=GV[(2):nrow(GV),]/GV[(1):(nrow(GV)-1),]-1
    # sent2=sent2[,1:14]-sent2[,15:28]
    # sentstd=rollapplyr(sent2,3,sd)*sqrt(12)
    # rownames(sentstd)=rownames(sent2)[3:nrow(sent2)]

    RV=sent1-rowMeans(sent1,na.rm=TRUE)

    RVrank=RV[(minobs1):nrow(RV),]*0


    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i



    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1
    #


    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1
    #


    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions


    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #


    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(ERet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(ERet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal

  print(match.call()[[1]])
  name1=match.call()[[1]]

  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1,BETA=betamat)

  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  E_ST_TS=functionoutput[[1]]
  E_ST_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EFX=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat){

  ## Momentum
  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=ERet[,1:10]}
    if (statrun==2){RET=ERet[,11:14]}
    index=Eindex[,colnames(RET)]

    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))[,colnames(RET)]

    minobs1=12
    minobs=60
    longlen=12
    shortlen=0
    Expanding=0

    nopos=0.4##middle section->neutral zone
    SDEV=12

    # WGT=c(0,0,0,1)
    # WGT2=WGT

    WGT=c(0.5,0.5)
    WGT2=WGT

    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=12
    assetsd=12
    statsd=12
    ##volupdate trigger
    Volband=0.1


    ##Magnitude
    Ret=RET
    Mag=fx[(longlen+1):nrow(fx),]
    obs=nrow(Mag)-1
    Mag=fx[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/fx[(1):(1+obs),]-1

    rownames(Mag)=rownames(fx)[(longlen+1):nrow(fx)]

    RV=-(Mag)
    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i



    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1

    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1

    Magrank=RVrank
    CSMagpos=CSRVpos



    ##Reliability

    ret=fx[2:nrow(fx),]/fx[1:(nrow(fx)-1),]-1
    STDEV=as.data.frame(rollapplyr(ret,SDEV,sd))*sqrt(12)
    rownames(STDEV)=rownames(fx)[(SDEV+1):nrow(fx)]
    STDEV1=STDEV[rownames(Mag)%in%rownames(fx)[(1+longlen):(1+longlen+obs)],]


    RV=(-Mag)/STDEV1

    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i


    # truecount=round(rowSums(!is.na(RVrank))*CS)
    # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1

    RV1=RV[(minobs1):nrow(RV),]
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSRelpos=CSRVpos


    ##Final CS signal(weighted)
    CSRV=CSRelpos*WGT2[2]+CSMagpos*WGT2[1]

    #translate to positions


    TS1=Magrank*0
    TS1[Magrank[,]>(nopos+(1-nopos)/2)]=1
    TS1[Magrank[,]<((1-nopos)/2)]=-1


    TS2=Relrank*0
    TS2[Relrank[,]>(nopos+(1-nopos)/2)]=1
    TS2[Relrank[,]<((1-nopos)/2)]=-1

    # TS1=Magrank*0
    #
    #
    # up=rep((nopos+(1-nopos)/2),ncol(TS1))
    # down=rep(((1-nopos)/2),ncol(TS1))
    #
    # TS1[1,]=(Magrank[1,]>=(up))*1+-1*(Magrank[1,]<=(down))
    # for(i in 2:nrow(Magrank)){
    #   TS1[i,]=(Magrank[i,]>=(up-(TS1[i-1,]>0)*0.025))*1+(Magrank[i,]<=(down+(TS1[i-1,]<0)*0.025))*-1
    #
    # }
    #
    # TS2=Magrank*0
    #
    # TS2[1,]=(Relrank[1,]>=(up))*1+-1*(Relrank[1,]<=(down))
    # for(i in 2:nrow(Relrank)){
    #   TS2[i,]=(Relrank[i,]>=(up-(TS2[i-1,]>0)*0.025))*1+(Relrank[i,]<=(down+(TS2[i-1,]<0)*0.025))*-1
    #
    # }




    ####Final Position
    TSRV=TS1*WGT[1]+TS2*WGT[2]


    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(ERet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(ERet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1,BETA=betamat)

  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  E_FX_TS=functionoutput[[1]]
  E_FX_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EMCA=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat1){





  carry <- as.data.frame(read.csv("D:/R/GRP/carry-em.csv", row.names=1,header=TRUE))
  # fut1price <- as.data.frame(read.csv("D:/R/GRP/FutGenNone1-em.csv", row.names=1,header=TRUE))
  # fut2price <- as.data.frame(read.csv("D:/R/GRP/FutGenNone2-em.csv", row.names=1,header=TRUE))
  # expday <- as.data.frame(read.csv("D:/R/GRP/fut1expiry-em.csv", row.names=1,header=TRUE))
  # expday=na.locf(expday,fromLast=TRUE)



  minobs1=12
  minobs=60

  Expanding=0

  nopos=0.4##middle section->neutral zone
  MA=c(1,2,3)/6

  CS=CSNUM3 # assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=260
  statsd=260
  ##volupdate trigger
  Volband=0.1

  ##carry score


  #carry=(fut1price-fut2price)/fut2price/expday
  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  # carry=carry[rownames(carry)%in%rownames(fx),]
  Ret=RET

  index=index[rownames(index)%in%rownames(fx),]
  ret=index[2:nrow(index),]/index[1:(nrow(index)-1),]-1


  RV=carry[12:nrow(carry),]
  RV[,colnames(RV)=="MY"]=NA
  RV[,colnames(RV)=="RU"]=NA
  RV[,colnames(RV)=="BR"]=NA
  if (IDN=="out"){
    RV[,colnames(RV)=="ID"]=NA
  }

  # MAM=matrix(rep(MA,ncol(Ret)),ncol=ncol(Ret))
  # for(i in length(MA):nrow(index)){
  #   RV[i,]=colSums(carry[(i-length(MA)+1):i,]*MAM)
  #
  # }
  # RV=RV[length(MA):nrow(index),]


  RVrank=RV[(minobs1):nrow(RV),]*0


  #
  # for(i in 1:(minobs-minobs1)) {
  #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # }#i
  #
  # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
  #
  #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
  #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
  # }#i
  #
  for(i in 1:(nrow(RV)-minobs1+1)) {
    RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  }#i





  # truecount=round(rowSums(!is.na(RVrank))*CS)
  # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
  # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
  # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
  # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
  # CSRVpos=CSRV*0
  # CSRVpos[CSRV[,]<=truecount]=-1
  # CSRVpos[CSRV1[,]<=truecount]=1

  RV1=RV[(minobs1):nrow(RV),]
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1



  ##Final CS signal(weighted)
  CSRV=CSRVpos
  CSRV[is.na(CSRV)]=0
  #translate to positions

  TSRV=RVrank*0

  TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
  TSRV[RVrank[,]<((1-nopos)/2)]=-1
  # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
  # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1
  # TSRV[RVrank[,]>0.95]=0
  # TSRV[RVrank[,]<0.05]=0

  # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
  # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1

  # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
  # down=rep(((1-nopos)/2),ncol(TSRV))
  #
  # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
  # TSRV[1,is.na(TSRV[1,])]=0
  # for(i in 2:nrow(RVrank)){
  #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
  #   TSRV[i,is.na(TSRV[i,])]=0
  # }
  #


  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RET
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RET


  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,rpname=name1,BETA=betamat1)

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EMPM=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat1){

  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=EMRet[,1:4]}
    if (statrun==2){RET=EMRet[,5:10]}
    index=EMindex[,colnames(RET)]


    ## Momentum

    fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
    index=index[wday(rownames(index))==RB1,]

    minobs1=52
    minobs=260
    longlen=52
    shortlen=2
    Expanding=0

    nopos=0.4##middle section->neutral zone
    SDEV=12

    # WGT=c(0,0,0,1)
    # WGT2=WGT

    WGT=c(1/3,1/3,1/3)
    WGT2=c(1,1,0)/3

    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1


    ##Magnitude
    Ret=RET
    Mag=index[(longlen+1):nrow(index),]
    obs=nrow(Mag)-1
    Mag=index[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/index[(1):(1+obs),]-1

    rownames(Mag)=rownames(index)[(longlen+1):nrow(index)]

    RVrank=Mag[(minobs):nrow(Mag),]*0

    RV=Mag


    ##Reliability
    ret=index[2:nrow(index),]/index[1:(nrow(index)-1),]-1

    STDEV=as.data.frame(rollapplyr(ret,longlen,sd))*sqrt(52)
    rownames(STDEV)=rownames(index)[(longlen+1):nrow(index)]
    STDEV1=STDEV[rownames(STDEV)%in%rownames(Mag),]


    RV=Mag#/STDEV1

    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }
    # STRV=-(index[2:nrow(index),]/index[1:(nrow(index)-1),]-1)
    #
    #
    # RV=STRV[52:nrow(STRV),]


    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSRelpos=CSRVpos
    TSRel=RV[(minobs1):nrow(RV),]

    TS1=TSRel*0
    TS1[TSRel[,]>(0)]=1
    TS1[TSRel[,]<(-0)]=-1
    #
    # TS1=TSRel*0
    # TS1[TSRel[,]>0.5]=1
    # TS1[TSRel[,]<(0.5)]=-1




    up=ret*0
    up[ret[,]>=0]=1
    Conroll=rollapplyr(up,longlen-shortlen,sum)/(longlen-shortlen)
    rownames(Conroll)=rownames(ret)[(longlen-shortlen):nrow(ret)]
    RV=as.data.frame(Conroll[1:(nrow(Conroll)-shortlen),])
    rownames(RV)=rownames(Mag)
    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }
    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSConpos=CSRVpos
    TSRel=RV[(minobs1):nrow(RV),]

    # TS1=TSRel*0
    # TS1[TSRel[,]>(0)]=1
    # TS1[TSRel[,]<(-0)]=-1
    #
    TS2=TSRel*0
    TS2[TSRel[,]>0.5]=1
    TS2[TSRel[,]<(0.5)]=-1





    ####Final Position
    TSRVL=TS1*WGT[1]+TS2*WGT[2]
    CSRVL=CSRelpos*WGT[1]+CSConpos*WGT2[2]
    #CSRV=CSConpos*WGT2[2]+CSRelpos*WGT2[1]



    ##3shortterm momentum
    longlen=13
    ##Magnitude
    Ret=RET
    Mag=index[(longlen+1):nrow(index),]
    obs=nrow(Mag)-1
    Mag=index[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/index[(1):(1+obs),]-1

    rownames(Mag)=rownames(index)[(longlen+1):nrow(index)]

    RVrank=Mag[(minobs):nrow(Mag),]*0

    RV=Mag


    ##Reliability
    ret=index[2:nrow(index),]/index[1:(nrow(index)-1),]-1

    STDEV=as.data.frame(rollapplyr(ret,longlen,sd))*sqrt(52)
    rownames(STDEV)=rownames(index)[(longlen+1):nrow(index)]
    STDEV1=STDEV[rownames(STDEV)%in%rownames(Mag),]


    RV=Mag#/STDEV1
    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }
    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSRelpos=CSRVpos
    TSRel=RV[(minobs1):nrow(RV),]

    TS1=TSRel*0
    TS1[TSRel[,]>(0)]=1
    TS1[TSRel[,]<(-0)]=-1
    #
    # TS1=TSRel*0
    # TS1[TSRel[,]>0.5]=1
    # TS1[TSRel[,]<(0.5)]=-1




    up=ret*0
    up[ret[,]>=0]=1
    Conroll=rollapplyr(up,longlen-shortlen,sum)/(longlen-shortlen)
    rownames(Conroll)=rownames(ret)[(longlen-shortlen):nrow(ret)]
    RV=as.data.frame(Conroll[1:(nrow(Conroll)-shortlen),])
    rownames(RV)=rownames(Mag)
    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }
    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSConpos=CSRVpos
    TSRel=RV[(minobs1):nrow(RV),]

    # TS1=TSRel*0
    # TS1[TSRel[,]>(0)]=1
    # TS1[TSRel[,]<(-0)]=-1
    #
    TS2=TSRel*0
    TS2[TSRel[,]>0.5]=1
    TS2[TSRel[,]<(0.5)]=-1



    STRV=-(index[5:nrow(index),]/index[1:(nrow(index)-4),]-1)
    #
    #
    RV=STRV[52:nrow(STRV),]
    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }
    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSREVpos=CSRVpos
    STRV=-(index[2:nrow(index),]/index[1:(nrow(index)-1),]-1)
    #
    #
    RV=STRV[52:nrow(STRV),]
    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }
    RVrank=RV[(minobs1):nrow(RV),]*0

    RV1=(RV[(minobs1):nrow(RV),])
    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSREV2pos=CSRVpos


    ####Final Position
    TSRVSh=TS1*WGT[1]+TS2*WGT[2]
    CSRVSh=CSREVpos*0.5+CSREV2pos[rownames(CSREVpos),]



    TSRV=TSRVSh[rownames(TSRVL),]*0.5+TSRVL*1
    CSRV=CSRVSh
    TSRV=TSRV[rownames(CSRV),]



    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(EMRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(EMRet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,"week",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=1,rpname=name1,BETA=betamat1)
  TStest=functionoutput[[1]]
  CStest=functionoutput[[2]]

  write.csv(  RAW(TStest,Ret),"TS.csv")
  write.csv(  RAW(CStest,Ret),"CS.csv")
  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}
EMSS=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat1){
  setwd("D:/R/GRP")
  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=EMRet[,1:4]}
    if (statrun==2){RET=EMRet[,5:10]}
    index=EMindex[,colnames(RET)]



    Ret=RET

    fundwgt=1
    statwgt=1

    minobs=500

    Expanding=1


    short=0.2

    day1=24#rebalance
    day2=2

    nopos=0.4##middle section->neutral zone
    MA=c(1,2,3,4,5)/15

    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02

    factorvol=0.02
    factorsd=260
    assetsd=260
    statsd=260
    ##volupdate trigger
    Volband=0.1

    ##carry score


    cal <- create.calendar("Actual",weekdays=c("saturday", "sunday"))
    TOM=as.data.frame(day(add.bizdays(rownames(Ret),1,cal)))
    rownames(TOM)=rownames(Ret)
    TOM2=TOM*0-1*short

    TOM2[TOM[,1]>=day1,1]=1
    # TOM2[TOM[,1]==1 & wday(rownames(TOM))!=3,1]=1
    # TOM2[TOM[,1]==2 & wday(rownames(TOM))!=3& wday(rownames(TOM))!=4,1]=1
    # TOM2[TOM[,1]==3 & wday(rownames(TOM))!=3& wday(rownames(TOM))!=4& wday(rownames(TOM))!=5,1]=1
    # TOM2[TOM[,1]==4 & wday(rownames(TOM))!=3& wday(rownames(TOM))!=4& wday(rownames(TOM))!=5& wday(rownames(TOM))!=6,1]=1
    # TOM2[TOM[,1]==5 & wday(rownames(TOM))!=3& wday(rownames(TOM))!=4& wday(rownames(TOM))!=5& wday(rownames(TOM))!=6& wday(rownames(TOM))!=7,1]=1
    # TOM2[TOM[,1]==6 & wday(rownames(TOM))==2,1]=1

    SIG=Ret*0+1
    SIG=SIG*TOM2[,1]

    # FOMC <- as.data.frame(read.csv("D:/R/GRP/FOMC2.csv", row.names=1,header=TRUE))
    # FOMCDM=TOM2*0
    # FOMCEM=TOM2*0
    # FOMCDM[as.Date(rownames(FOMCDM))%in%add.bizdays(rownames(FOMC),-2,cal),1]=1
    # FOMCEM[as.Date(rownames(FOMCEM))%in%add.bizdays(rownames(FOMC),-1,cal),1]=1
    #
    # SIG2=Ret*0
    # SIG2[,1:6]=FOMCEM
    # SIG2[,7:10]=FOMCDM

    TSRV1=SIG*fundwgt*1#+SIG2*0
    if (IDN=="out"){
      TSRV1[,colnames(TSRV1)=="ID"]=NA
    }


    short=0


    CSRV=index*0
    statday=unique(as.yearmon(rownames(Ret))+1/12)
    bible=as.data.frame(matrix(0,nrow=(length(statday)-36),ncol=ncol(index)))
    bible$YM=statday[(36+1-short):(length(statday)-short)]
    bible$mon=month(bible$YM)
    Ret$YM=as.yearmon(rownames(Ret))
    Ret$mon=month(rownames(Ret))
    if (IDN=="out"){
      Ret[,colnames(Ret)=="ID"]=NA
    }

    # for (i in 1:nrow(bible)){
    #   ave=mean(colMeans(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }

    for (i in 1:nrow(bible)){
      ave=(colMeans(Ret[Ret$YM<(bible$YM[i]) &Ret$YM>=statday[i]&Ret$mon!=bible$mon[i],1:ncol(index)],na.rm=TRUE))
      bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i])& Ret$YM>=statday[i]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i])& Ret$YM>=statday[i]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)

    }

    #
    # for (i in 1:60){
    #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }
    #
    # for (i in 61:nrow(bible)){
    #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)]))
    # }


    RV1=bible[,1:ncol(index)]

    if (IDN=="out"){
      RV1[,colnames(RV1)=="ID"]=NA
    }


    truecount=round(rowSums(!is.na(RV1))*CS)
    truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))

    bibleRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    bibleRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    bibleRVpos=bibleRV*0
    bibleRVpos[bibleRV[,]<=truecount]=-1
    bibleRVpos[bibleRV1[,]<=truecount]=1

    CSRV=CSRV[as.yearmon(rownames(CSRV))>=bible$YM[1],]

    #####need to adjust due to month end rebalancing(get Nov on oct/31)
    for(i in 1:nrow(bible)){
      CSRV[as.yearmon(rownames(CSRV))==(bible$YM[i]-1/12),1:ncol(index)]=bibleRVpos[i,1:ncol(index)]*statwgt
    }


    bibleTS1=bible[,1:ncol(index)]
    bibleTS=bibleTS1*0
    bibleTS[bibleTS1[]<(-0.5)]=-1
    bibleTS[bibleTS1[]>(0.5)]=1
    TSRV=CSRV*0
    for(i in 1:nrow(bible)){
      TSRV[as.yearmon(rownames(TSRV))==bible$YM[i],1:ncol(index)]=bibleTS[i,1:ncol(index)]
    }

    AAA=intersect(rownames(TSRV1),rownames(TSRV))
    TSRV1=TSRV1[AAA,]
    TSRV=TSRV[AAA,]

    TSRV=TSRV1*1+TSRV*0
    AAA=intersect(rownames(TSRV),rownames(CSRV))
    CSRV=CSRV[AAA,]
    TSRV=TSRV[AAA,]


    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(EMRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(EMRet)]



  print(match.call()[[1]])
  name1=match.call()[[1]]
  Ret=RETfinal
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,FALSE,CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,rpname=name1,BETA=betamat1)

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EMVO=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat1){

  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=EMRet[,1:4]}
    if (statrun==2){RET=EMRet[,5:10]}
    index=EMindex[,colnames(RET)]


    Ret=RET

    minobs1=12
    minobs=60
    longlen=12
    shortlen=0
    Expanding=0

    nopos=0.4##middle section->neutral zone
    SDEV=12

    # WGT=c(0,0,0,1)
    # WGT2=WGT

    WGT=c(0.5,0.5)
    WGT2=WGT

    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=12
    assetsd=12
    statsd=12
    ##volupdate trigger
    Volband=0.1



    fx<- as.data.frame(read.csv("D:/R/GRP/fx-em.csv", row.names=1,header=TRUE))[,colnames(RET)]


    ##Magnitude

    Mag=fx[(longlen+1):nrow(fx),]
    obs=nrow(Mag)-1
    Mag=fx[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/fx[(1):(1+obs),]-1

    rownames(Mag)=rownames(fx)[(longlen+1):nrow(fx)]

    RV=(Mag)

    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }
    RVrank=RV[(minobs1):nrow(RV),]*0

    for(i in 1:(minobs-minobs1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i

    for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {

      RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
      RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    }#i

    # for(i in 1:(nrow(RV)-minobs1+1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i



    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1

    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1

    Magrank=RVrank
    CSMagpos=CSRVpos



    ##Reliability

    # ret=fx[2:nrow(fx),]/fx[1:(nrow(fx)-1),]-1
    # STDEV=as.data.frame(rollapplyr(ret,SDEV,sd))*sqrt(12)
    # rownames(STDEV)=rownames(fx)[(SDEV+1):nrow(fx)]
    # STDEV1=STDEV[rownames(Mag)%in%rownames(fx)[(1+longlen):(1+longlen+obs)],]

    longlen=3

    Mag=fx[(longlen+1):nrow(fx),]
    obs=nrow(Mag)-1
    Mag=fx[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/fx[(1):(1+obs),]-1

    rownames(Mag)=rownames(fx)[(longlen+1):nrow(fx)]

    RV=(Mag)



    RV=(Mag)#/STDEV1
    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }
    RVrank=RV[(minobs1):nrow(RV),]*0


    for(i in 1:(minobs-minobs1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i

    for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {

      RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
      RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    }#i

    # for(i in 1:(nrow(RV)-minobs1+1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i





    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1

    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1


    Relrank=RVrank
    CSRelpos=CSRVpos

    AAA=intersect(rownames(CSRelpos),rownames(CSMagpos))
    CSMagpos=CSMagpos[AAA,]
    CSRelpos=CSRelpos[AAA,]
    ##Final CS signal(weighted)
    CSRV=CSRelpos*WGT2[2]+CSMagpos*WGT2[1]

    #translate to positions


    TS1=Magrank*0
    TS1[Magrank[,]>(nopos+(1-nopos)/2)]=1
    TS1[Magrank[,]<((1-nopos)/2)]=-1


    TS2=Relrank*0
    TS2[Relrank[,]>(nopos+(1-nopos)/2)]=1
    TS2[Relrank[,]<((1-nopos)/2)]=-1

    # TS1=Magrank*0
    #
    #
    # up=rep((nopos+(1-nopos)/2),ncol(TS1))
    # down=rep(((1-nopos)/2),ncol(TS1))
    #
    # TS1[1,]=(Magrank[1,]>=(up))*1+-1*(Magrank[1,]<=(down))
    # for(i in 2:nrow(Magrank)){
    #   TS1[i,]=(Magrank[i,]>=(up-(TS1[i-1,]>0)*0.025))*1+(Magrank[i,]<=(down+(TS1[i-1,]<0)*0.025))*-1
    #
    # }
    #
    # TS2=Magrank*0
    #
    # TS2[1,]=(Relrank[1,]>=(up))*1+-1*(Relrank[1,]<=(down))
    # for(i in 2:nrow(Relrank)){
    #   TS2[i,]=(Relrank[i,]>=(up-(TS2[i-1,]>0)*0.025))*1+(Relrank[i,]<=(down+(TS2[i-1,]<0)*0.025))*-1
    #
    # }

    AAA=intersect(rownames(TS1),rownames(TS2))
    TS1=TS1[AAA,]
    TS2=TS2[AAA,]


    ####Final Position
    TSRV=TS1*WGT[1]+TS2*WGT[2]


    TSRV$mon=as.yearmon(rownames(TSRV))+1/12
    start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
    TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
    CSRVtemp=TSRVtemp
    for (ss in 1:nrow(TSRV)){
      TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
      CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
    }
    TSRVstat1=TSRVtemp
    CSRVstat1=CSRVtemp
    Ret=RET



    Ret=RET
    Retpos=Ret
    Retneg=Ret
    Retpos[Ret<0]=NA
    Retneg[Ret>0]=NA

    per=63
    STDpos=as.data.frame(rollapplyr(Retpos,per,sd,na.rm=TRUE))
    STDneg=as.data.frame(rollapplyr(Retneg,per,sd,na.rm=TRUE))

    rownames(STDpos)=rownames(Retpos)[(per):nrow(Retpos)]
    rownames(STDneg)=rownames(Retpos)[(per):nrow(Retpos)]

    RV=-STDpos+STDneg
    #RV=(-STDpos+STDneg)/(STDpos+STDneg)

    RV=RV[wday(rownames(RV))==RB1,]



    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }

    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i


    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1

    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1
    # rownames(CSRVpos)=rownames(RV1)
    # #

    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions


    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1





    TSRV$mon=as.yearmon(rownames(TSRV))+1/12
    start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
    TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
    CSRVtemp=TSRVtemp
    for (ss in 1:nrow(TSRV)){
      TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
      CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
    }
    TSRVstat2=TSRVtemp
    CSRVstat2=CSRVtemp
    Ret=RET


    AAA=intersect(rownames(TSRVstat1),rownames(TSRVstat2))
    TSRVstat1=TSRVstat1[AAA,]
    TSRVstat2=TSRVstat2[AAA,]
    CSRVstat1=CSRVstat1[AAA,]
    CSRVstat2=CSRVstat2[AAA,]

    TSRV=TSRVstat1*1+TSRVstat2
    CSRV=CSRVstat1*1+CSRVstat2


    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(EMRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(EMRet)]

  Ret=RETfinal



  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,"week",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=1,rpname=name1,BETA=betamat1)


  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EMDY=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign,BETA=betamat1){


  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=EMRet[,1:4]}
    if (statrun==2){RET=EMRet[,5:10]}
    index=EMindex[,colnames(RET)]


    priceindex <- as.data.frame(read.csv("D:/R/GRP/priceindex-mon-em.csv", row.names=1,header=TRUE))[,colnames(RET)]
    Ret=RET




    yield <- as.data.frame(read.csv("D:/R/GRP/10Yield-em.csv", row.names=1,header=TRUE))[,colnames(RET)]
    DPS <- as.data.frame(read.csv("D:/R/GRP/DPS-em.csv", row.names=1,header=TRUE))[,colnames(RET)]
    DPS1 <- as.data.frame(read.csv("D:/R/GRP/DPS1-em.csv", row.names=1,header=TRUE))[,colnames(RET)]



    minobs1=12
    minobs=60

    Expanding=0

    nopos=0.4##middle section->neutral zone


    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=12
    assetsd=12
    statsd=12
    ##volupdate trigger
    Volband=0.1

    ##carry score




    ###
    # DPS=DPS[rownames(DPS)>="2004-01-30",]
    # yield=yield[rownames(yield)>="2004-01-30",]
    DPS[is.na(DPS)]=DPS1[is.na(DPS)]


    DYP=priceindex[rownames(DPS),]
    DY=DPS/DYP

    #Rvalue=DY
    #
    Rvalue=DY[rownames(yield),]-yield/100


    Rvalue=DY[rownames(yield),]#-yield/100

    Rvalue=Rvalue[4:nrow(Rvalue),]-Rvalue[1:(nrow(Rvalue)-3),]


    RV=Rvalue
    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }

    RVrank=RV[(minobs1):nrow(RV),]*0

    #
    for(i in 1:(minobs-minobs1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i

    for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {

      RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
      RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    }#i
    #
    # for(i in 1:(nrow(RV)-minobs1+1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i

    #
    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1

    Rvalue=DY[rownames(yield),]-yield/100


    Rvalue=Rvalue[4:nrow(Rvalue),]


    RV=Rvalue
    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }

    RVrank=RV[(minobs1):nrow(RV),]*0


    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i

    #
    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions


    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    TSRV[is.na(TSRV)]=0
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #


    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(EMRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(EMRet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1,BETA=betamat1)

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

EMPE=function(TSWGT=1,CSWGT=1,RB1=5,RB2=5,RET,index,CSdesign,BETA=betamat1){

  RETfinal=RET

  for(statrun in 1:2){
    if (statrun==1){RET=EMRet[,1:4]}
    if (statrun==2){RET=EMRet[,5:10]}
    index=EMindex[,colnames(RET)]

    Ret=RET




    yield <- as.data.frame(read.csv("D:/R/GRP/10Yield-em.csv", row.names=1,header=TRUE))[,colnames(RET)]
    EPS <- as.data.frame(read.csv("D:/R/GRP/EPS-em.csv", row.names=1,header=TRUE))[,colnames(RET)]
    EPS1 <- as.data.frame(read.csv("D:/R/GRP/EPS1-em.csv", row.names=1,header=TRUE))[,colnames(RET)]
    index1 <- as.data.frame(read.csv("D:/R/GRP/priceindex-mon-em.csv", row.names=1,header=TRUE))[,colnames(RET)]
    minobs1=12
    minobs=60

    Expanding=0

    nopos=0.4##middle section->neutral zone


    CS=CSNUM # assets to long and short

    #Factor Portfolio construction
    Assetvol=0.02
    Strategyvol=0.02
    factorvol=0.02
    factorsd=12
    assetsd=12
    statsd=12
    ##volupdate trigger
    Volband=0.1

    ##carry score

    Ret=RET

    ###
    # DPS=DPS[rownames(DPS)>="2004-01-30",]
    # yield=yield[rownames(yield)>="2004-01-30",]




    EY=(EPS)
    EYD=(EPS1)

    Rvalue=EY/index1[rownames(EY),]


    RV=Rvalue


    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }
    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i


    #
    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    #
    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions

    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #

    CSRV6=CSRV
    TSRV6=TSRV

    Rvalue=EY/EYD


    RV=Rvalue


    if (IDN=="out"){
      RV[,colnames(RV)=="ID"]=NA
    }
    RVrank=RV[(minobs1):nrow(RV),]*0



    # for(i in 1:(minobs-minobs1)) {
    #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    # }#i
    #
    # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
    #
    #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
    # }#i

    for(i in 1:(nrow(RV)-minobs1+1)) {
      RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
      RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
    }#i


    #
    truecount=round(rowSums(!is.na(RVrank))*CS)
    truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
    tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
    CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
    CSRVpos=CSRV*0
    CSRVpos[CSRV[,]<=truecount]=-1
    CSRVpos[CSRV1[,]<=truecount]=1


    #
    # RV1=RV[(minobs1):nrow(RV),]
    # truecount=round(rowSums(!is.na(RV1))*CS)
    # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
    # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
    # CSRVpos=CSRV*0
    # CSRVpos[CSRV[,]<=truecount]=-1
    # CSRVpos[CSRV1[,]<=truecount]=1



    ##Final CS signal(weighted)
    CSRV=CSRVpos
    CSRV[is.na(CSRV)]=0
    #translate to positions

    TSRV=RVrank*0
    TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
    TSRV[RVrank[,]<((1-nopos)/2)]=-1
    # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
    # down=rep(((1-nopos)/2),ncol(TSRV))
    #
    # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
    # TSRV[1,is.na(TSRV[1,])]=0
    # for(i in 2:nrow(RVrank)){
    #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
    #   TSRV[i,is.na(TSRV[i,])]=0
    # }
    #
    CSRV=CSRV+CSRV6*0.8
    TSRV=TSRV#+TSRV6

    if(statrun==1){
      TSRVrun1=TSRV
      CSRVrun1=CSRV

    }
    if(statrun==2){
      TSRVrun2=TSRV
      CSRVrun2=CSRV
    }
  }
  TSRV=cbind(TSRVrun1,TSRVrun2)[,colnames(EMRet)]
  CSRV=cbind(CSRVrun1,CSRVrun2)[,colnames(EMRet)]

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))

  Ret=RETfinal
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RETfinal

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1,BETA=betamat1)

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

IPM=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign){

  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  index=index[wday(rownames(index))==RB1,]

  minobs1=52
  minobs=260
  longlen=52
  shortlen=4
  Expanding=0

  nopos=0.4##middle section->neutral zone
  SDEV=12

  # WGT=c(0,0,0,1)
  # WGT2=WGT

  WGT=c(1/3,1/3,1/3)
  WGT2=c(1,1,0)/3

  CS=CSNUM2 # assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=260
  statsd=260
  ##volupdate trigger
  Volband=0.1


  ##Magnitude
  Ret=RET
  Mag=index[(longlen+1):nrow(index),]
  obs=nrow(Mag)-1
  Mag=index[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/index[(1):(1+obs),]-1

  rownames(Mag)=rownames(index)[(longlen+1):nrow(index)]

  RVrank=Mag[(minobs):nrow(Mag),]*0

  RV=Mag


  ##Reliability
  ret=index[2:nrow(index),]/index[1:(nrow(index)-1),]-1

  STDEV=as.data.frame(rollapplyr(ret,longlen,sd))*sqrt(52)
  rownames(STDEV)=rownames(index)[(longlen+1):nrow(index)]
  STDEV1=STDEV[rownames(STDEV)%in%rownames(Mag),]


  RV=Mag#/STDEV1


  # STRV=-(index[2:nrow(index),]/index[1:(nrow(index)-1),]-1)
  #
  #
  # RV=STRV[52:nrow(STRV),]


  RVrank=RV[(minobs1):nrow(RV),]*0

  RV1=(RV[(minobs1):nrow(RV),])
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1


  Relrank=RVrank
  CSRelpos=CSRVpos
  TSRel=RV[(minobs1):nrow(RV),]

  TS1=TSRel*0
  TS1[TSRel[,]>(0)]=1
  TS1[TSRel[,]<(-0)]=-1
  #
  # TS1=TSRel*0
  # TS1[TSRel[,]>0.5]=1
  # TS1[TSRel[,]<(0.5)]=-1




  up=ret*0
  up[ret[,]>=0]=1
  Conroll=rollapplyr(up,longlen-shortlen,sum)/(longlen-shortlen)
  rownames(Conroll)=rownames(ret)[(longlen-shortlen):nrow(ret)]
  RV=as.data.frame(Conroll[1:(nrow(Conroll)-shortlen),])
  rownames(RV)=rownames(Mag)

  RVrank=RV[(minobs1):nrow(RV),]*0

  RV1=(RV[(minobs1):nrow(RV),])
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1


  Relrank=RVrank
  CSConpos=CSRVpos
  TSRel=RV[(minobs1):nrow(RV),]

  # TS1=TSRel*0
  # TS1[TSRel[,]>(0)]=1
  # TS1[TSRel[,]<(-0)]=-1
  #
  TS2=TSRel*0
  TS2[TSRel[,]>0.5]=1
  TS2[TSRel[,]<(0.5)]=-1





  ####Final Position
  TSRVL=TS1*WGT[1]#+TS2*WGT[2]
  CSRVL=CSRelpos*WGT[1]#+CSConpos*WGT2[2]
  #CSRV=CSConpos*WGT2[2]+CSRelpos*WGT2[1]



  ##3shortterm momentum
  longlen=4
  shortlen=0
  ##Magnitude
  Ret=RET
  Mag=index[(longlen+1):nrow(index),]
  obs=nrow(Mag)-1
  Mag=index[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/index[(1):(1+obs),]-1

  rownames(Mag)=rownames(index)[(longlen+1):nrow(index)]

  RVrank=Mag[(minobs):nrow(Mag),]*0

  RV=Mag


  ##Reliability
  ret=index[2:nrow(index),]/index[1:(nrow(index)-1),]-1

  STDEV=as.data.frame(rollapplyr(ret,longlen,sd))*sqrt(52)
  rownames(STDEV)=rownames(index)[(longlen+1):nrow(index)]
  STDEV1=STDEV[rownames(STDEV)%in%rownames(Mag),]


  RV=Mag#/STDEV1

  RVrank=RV[(minobs1):nrow(RV),]*0

  RV1=(RV[(minobs1):nrow(RV),])
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1


  Relrank=RVrank
  CSRelpos=CSRVpos
  TSRel=RV[(minobs1):nrow(RV),]

  TS1=TSRel*0
  TS1[TSRel[,]>(0)]=1
  TS1[TSRel[,]<(-0)]=-1
  #
  # TS1=TSRel*0
  # TS1[TSRel[,]>0.5]=1
  # TS1[TSRel[,]<(0.5)]=-1




  up=ret*0
  up[ret[,]>=0]=1
  Conroll=rollapplyr(up,longlen-shortlen,sum)/(longlen-shortlen)
  rownames(Conroll)=rownames(ret)[(longlen-shortlen):nrow(ret)]
  RV=as.data.frame(Conroll[1:(nrow(Conroll)-shortlen),])
  rownames(RV)=rownames(Mag)

  RVrank=RV[(minobs1):nrow(RV),]*0

  RV1=(RV[(minobs1):nrow(RV),])
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1


  Relrank=RVrank
  CSConpos=CSRVpos
  TSRel=RV[(minobs1):nrow(RV),]

  # TS1=TSRel*0
  # TS1[TSRel[,]>(0)]=1
  # TS1[TSRel[,]<(-0)]=-1
  #
  TS2=TSRel*0
  TS2[TSRel[,]>0.5]=1
  TS2[TSRel[,]<(0.5)]=-1





  ####Final Position
  TSRVSh=TS1*WGT[1]#+TS2*WGT[2]
  CSRVSh=CSRelpos*WGT[1]#+CSConpos*WGT2[2]


  TSRV=TSRVSh[rownames(TSRVL),]*0.5+TSRVL*1
  CSRV=CSRVSh[rownames(CSRVL),]*0.5+CSRVL*1
  AAA=intersect(rownames(TSRV),rownames(CSRV))
  TSRV=TSRV[AAA,]
  CSRV=CSRV[AAA,]
  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RET

  print(match.call()[[1]])
  name1=match.call()[[1]]

  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=irfactor(TSRV,CSRV,Ret,"week",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=1,IR=1,rpname=name1)

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}



ICA=function(TSWGT=1,CSWGT=1,RB1=5,RB2=5,RET,index,CSdesign){


  setwd("D:/R/GRP")

  twoYR <- as.data.frame(read.csv("D:/R/GRP/bonds2yr.csv", row.names=1,header=TRUE))
  tenYR <- as.data.frame(read.csv("D:/R/GRP/bonds10yr.csv", row.names=1,header=TRUE))
  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

  if(JGB=="out"){twoYR=twoYR[,1:4]
  tenYR=tenYR[,1:4]}


  minobs1=12
  minobs=60

  Expanding=0

  nopos=0.4##middle section->neutral zone
  MA=c(1,2,3)/6

  CS=CSNUM2 # assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=260
  statsd=260
  ##volupdate trigger
  Volband=0.1

  ##carry score


  carry=tenYR-twoYR
  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  carry=carry[rownames(carry)%in%rownames(fx),]
  #carry=carry[wday(rownames(carry))==RB1,]
  Ret=RET
  carryd=tenYR-twoYR

  STDEV=as.data.frame(rollapplyr(carryd,252,sd))
  rownames(STDEV)=rownames(carryd)[(252):nrow(carryd)]
  STDEV=STDEV[rownames(STDEV)%in%rownames(fx),]
  carry=carry[rownames(carry)%in%rownames(STDEV),]/STDEV

  RV=carry[12:nrow(carry),]#-rowMeans(carry[12:nrow(carry),])
  # MAM=matrix(rep(MA,ncol(Ret)),ncol=ncol(Ret))
  # for(i in length(MA):nrow(index)){
  #   RV[i,]=colSums(carry[(i-length(MA)+1):i,]*MAM)
  #
  # }
  # RV=RV[length(MA):nrow(index),]


  RVrank=RV[(minobs1):nrow(RV),]*0



  # for(i in 1:(minobs-minobs1)) {
  #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # }#i
  #
  # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
  #
  #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
  #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
  # }#i

  for(i in 1:(nrow(RV)-minobs1+1)) {
    RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  }#i


  # truecount=round(rowSums(!is.na(RVrank))*CS)
  # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
  # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
  # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
  # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
  # CSRVpos=CSRV*0
  # CSRVpos[CSRV[,]<=truecount]=-1
  # CSRVpos[CSRV1[,]<=truecount]=1


  # carry=tenYR-twoYR
  # carry=carry[rownames(carry)%in%rownames(STDEV),]
  #
  # RV=carry[12:nrow(carry),]


  RV1=RV[(minobs1):nrow(RV),]
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1



  ##Final CS signal(weighted)
  CSRVone=CSRVpos
  CSRVone[is.na(CSRVone)]=0
  #translate to positions

  TSRVone=RVrank*0

  TSRVone[RVrank[,]>(nopos+(1-nopos)/2)]=1
  TSRVone[RVrank[,]<((1-nopos)/2)]=-1
  # TSRVone[RV1[,]>(0)]=1
  # TSRVone[RV1[,]<(0)]=-1
  #
  #
  # carry <- as.data.frame(read.csv("D:/R/GRP/bondscarry.csv", row.names=1,header=TRUE))
  # if(JGB=="out"){carry=carry[,1:4]}
  # fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  # Ret=RET
  #
  # RV=carry[12:nrow(carry),]
  #
  # RVrank=RV[(minobs1):nrow(RV),]*0
  #
  # for(i in 1:(nrow(RV)-minobs1+1)) {
  #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # }#i
  #
  # RV1=RV[(minobs1):nrow(RV),]
  # truecount=round(rowSums(!is.na(RV1))*CS)
  # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  # CSRVpos=CSRV*0
  # CSRVpos[CSRV[,]<=truecount]=-1
  # CSRVpos[CSRV1[,]<=truecount]=1
  #
  #
  #
  # ##Final CS signal(weighted)
  # CSRVthree=CSRVpos
  # CSRVthree[is.na(CSRVthree)]=0
  # #translate to positions
  #
  # TSRVthree=RVrank*0
  #
  # TSRVthree[RVrank[,]>(nopos+(1-nopos)/2)]=1
  # TSRVthree[RVrank[,]<((1-nopos)/2)]=-1
  # TSRVthree[RV1[,]>(0)]=1
  # TSRVthree[RV1[,]<(0)]=-1
  # # TSRV=TSRVone+TSRVtwo
  # # CSRV=CSRVone+CSRVtwo
  #
  # TSRV=TSRVone[rownames(TSRVone)%in%rownames(TSRVthree),]+TSRVthree
  # CSRV=CSRVone[rownames(CSRVone)%in%rownames(CSRVthree),]+CSRVthree
  #
  TSRV=TSRVone
  CSRV=CSRVone
  AAA=intersect(rownames(TSRV),rownames(CSRV))
  TSRV=TSRV[AAA,]
  CSRV=CSRV[AAA,]
  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RET


  print(match.call()[[1]])
  name1=match.call()[[1]]

  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  #functionoutput=irfactor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,IR=1,rpname=name1)
  functionoutput=irfactor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,ex=0,CSweek=0,monitor=1,IR=1,RB1=RBP,rpname=name1)



  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

ICA2=function(TSWGT=1,CSWGT=1,RB1=5,RB2=5,RET,index,CSdesign){


  twoYR <- as.data.frame(read.csv("D:/R/GRP/bonds2yr.csv", row.names=1,header=TRUE))
  tenYR <- as.data.frame(read.csv("D:/R/GRP/bonds10yr.csv", row.names=1,header=TRUE))
  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

  if(JGB=="out"){twoYR=twoYR[,1:4]
  tenYR=tenYR[,1:4]}


  minobs1=12
  minobs=60

  Expanding=0

  nopos=0.4##middle section->neutral zone
  MA=c(1,2,3)/6

  CS=CSNUM2 # assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=260
  statsd=260
  ##volupdate trigger
  Volband=0.1

  ##carry score


  carry=tenYR-twoYR
  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  carry=carry[rownames(carry)%in%rownames(fx),]
  #carry=carry[wday(rownames(carry))==RB1,]
  Ret=RET
  carryd=tenYR-twoYR

  STDEV=as.data.frame(rollapplyr(carryd,252,sd))
  rownames(STDEV)=rownames(carryd)[(252):nrow(carryd)]
  STDEV=STDEV[rownames(STDEV)%in%rownames(fx),]
  carry=carry[rownames(carry)%in%rownames(STDEV),]/STDEV

  RV=carry[12:nrow(carry),]#-rowMeans(carry[12:nrow(carry),])
  # MAM=matrix(rep(MA,ncol(Ret)),ncol=ncol(Ret))
  # for(i in length(MA):nrow(index)){
  #   RV[i,]=colSums(carry[(i-length(MA)+1):i,]*MAM)
  #
  # }
  # RV=RV[length(MA):nrow(index),]


  RVrank=RV[(minobs1):nrow(RV),]*0



  # for(i in 1:(minobs-minobs1)) {
  #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # }#i
  #
  # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
  #
  #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
  #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
  # }#i

  for(i in 1:(nrow(RV)-minobs1+1)) {
    RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  }#i




  carry=tenYR-twoYR
  if(JGB=="out"){carry=carry[,1:4]}
  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  carry=carry[rownames(carry)%in%rownames(fx),]
  Ret=RET
  RV=carry[4:nrow(carry),]-carry[1:(nrow(carry)-3),]

  RV1=RV[(minobs1-3):nrow(RV),]
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1
  ##Final CS signal(weighted)
  CSRV=CSRVpos
  CSRV[is.na(CSRV)]=0
  #translate to positions


  CSRVone=CSRV




  carry=tenYR-twoYR
  if(JGB=="out"){carry=carry[,1:4]}
  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  carry=carry[rownames(carry)%in%rownames(fx),]
  Ret=RET
  RV=carry[7:nrow(carry),]-carry[1:(nrow(carry)-6),]

  RV1=RV[(minobs1-6):nrow(RV),]
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1
  ##Final CS signal(weighted)
  CSRV=CSRVpos
  CSRV[is.na(CSRV)]=0
  #translate to positions
  CSRVtwo=CSRV




  CSRV=CSRVtwo+CSRVone


  TSRV=RVrank
  AAA=intersect(rownames(TSRV),rownames(CSRV))
  TSRV=TSRV[AAA,]
  CSRV=CSRV[AAA,]
  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  if(JGB=="out"){Ret=Ret[,1:4]}

  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*0
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RET



  print(match.call()[[1]])
  name1=match.call()[[1]]

  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  #functionoutput=irfactor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,IR=1,rpname=name1)
  functionoutput=irfactor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,ex=0,CSweek=0,monitor=1,IR=1,RB1=RBP,rpname=name1)



  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}


ISS=function(TSWGT=1,CSWGT=1,RB1=5,RB2=5,RET,index,CSdesign){
  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))



  fundwgt=1
  statwgt=1

  minobs=500

  Expanding=1


  short=0.2

  day1=24#rebalance
  day2=7

  nopos=0.4##middle section->neutral zone
  MA=c(1,2,3,4,5)/15

  CS=CSNUM2 # assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02

  factorvol=0.02
  factorsd=260
  assetsd=260
  statsd=260
  ##volupdate trigger
  Volband=0.1

  ##carry score
  Ret=RET
  cal <- create.calendar("Actual",weekdays=c("saturday", "sunday"))
  TOM=as.data.frame(day(add.bizdays(rownames(Ret),1,cal)))
  rownames(TOM)=rownames(Ret)
  TOM2=TOM*0-1*short

  TOM2[TOM[,1]>=day1,1]=1
  # TOM2[TOM[,1]==1 & wday(rownames(TOM))!=3,1]=1
  # TOM2[TOM[,1]==2 & wday(rownames(TOM))!=3& wday(rownames(TOM))!=4,1]=1
  # TOM2[TOM[,1]==3 & wday(rownames(TOM))!=3& wday(rownames(TOM))!=4& wday(rownames(TOM))!=5,1]=1
  # TOM2[TOM[,1]==4 & wday(rownames(TOM))!=3& wday(rownames(TOM))!=4& wday(rownames(TOM))!=5& wday(rownames(TOM))!=6,1]=1
  # TOM2[TOM[,1]==5 & wday(rownames(TOM))!=3& wday(rownames(TOM))!=4& wday(rownames(TOM))!=5& wday(rownames(TOM))!=6& wday(rownames(TOM))!=7,1]=1
  # TOM2[TOM[,1]==6 & wday(rownames(TOM))==2,1]=1

  SIG=Ret*0+1
  SIG=SIG*TOM2[,1]

  FOMC <- as.data.frame(read.csv("D:/R/GRP/FOMC2.csv", row.names=1,header=TRUE))
  FOMCDM=TOM2*0
  FOMCEM=TOM2*0
  FOMCDM[as.Date(rownames(FOMCDM))%in%add.bizdays(rownames(FOMC),-2,cal),1]=1
  FOMCEM[as.Date(rownames(FOMCEM))%in%add.bizdays(rownames(FOMC),-1,cal),1]=1

  SIG2=Ret*0
  SIG2[,1:4]=FOMCDM
  if(JGB!="out"){SIG2[,5]=FOMCEM}


  TSRV1=SIG*fundwgt*1#+SIG2*0.5



  short=0

  CSRV=index*0
  statday=unique(as.yearmon(rownames(Ret))+1/12)
  bible=as.data.frame(matrix(0,nrow=(length(statday)-60),ncol=ncol(index)))
  bible$YM=statday[(60+1-short):(length(statday)-short)]
  bible$mon=month(bible$YM)
  Ret$YM=as.yearmon(rownames(Ret))
  Ret$mon=month(rownames(Ret))

  for (i in 1:nrow(bible)){
    ave=mean(colMeans(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
    bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
    #bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<bible$YM[i]& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)]))
  }

  # for (i in 1:nrow(bible)){
  #   ave=(colMeans(Ret[Ret$YM<(bible$YM[i]) &Ret$YM>=statday[i]&Ret$mon!=bible$mon[i],1:ncol(index)],na.rm=TRUE))
  #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i])& Ret$YM>=statday[i]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i])& Ret$YM>=statday[i]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
  #
  # }

  #
  # for (i in 1:60){
  #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
  #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
  #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[1]&Ret$mon==bible$mon[i],1:ncol(index)]))
  # }
  #
  # for (i in 61:nrow(bible)){
  #   ave=mean(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))
  #   bible[i,1:ncol(index)]=(colMeans(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)],na.rm=TRUE))/colSds(as.matrix(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]& Ret$mon==bible$mon[i],1:ncol(CSRV)]),na.rm=TRUE)
  #   bible[i,1:ncol(index)]=bible[i,1:ncol(index)]*sqrt(nrow(Ret[Ret$YM<(bible$YM[i]-2)& Ret$YM>=statday[i-60]&Ret$mon==bible$mon[i],1:ncol(index)]))
  # }


  RV1=bible[,1:ncol(index)]
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))

  bibleRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  bibleRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  bibleRVpos=bibleRV*0
  bibleRVpos[bibleRV[,]<=truecount]=-1
  bibleRVpos[bibleRV1[,]<=truecount]=1

  CSRV=CSRV[as.yearmon(rownames(CSRV))>=bible$YM[1],]

  #####need to adjust due to month end rebalancing(get Nov on oct/31)
  for(i in 1:nrow(bible)){
    CSRV[as.yearmon(rownames(CSRV))==(bible$YM[i]-1/12),1:ncol(index)]=bibleRVpos[i,1:ncol(index)]*statwgt
  }





  bibleTS1=bible[,1:ncol(index)]
  bibleTS=bibleTS1*0
  bibleTS[bibleTS1[]<(-0.5)]=-1
  bibleTS[bibleTS1[]>(0.5)]=1
  TSRV=CSRV*0
  for(i in 1:nrow(bible)){
    TSRV[as.yearmon(rownames(TSRV))==bible$YM[i],1:ncol(index)]=bibleTS[i,1:ncol(index)]
  }

  AAA=intersect(rownames(TSRV1),rownames(TSRV))
  TSRV1=TSRV1[AAA,]
  TSRV=TSRV[AAA,]

  TSRV=TSRV1*1+TSRV*0
  AAA=intersect(rownames(TSRV),rownames(CSRV))
  CSRV=CSRV[AAA,]
  TSRV=TSRV[AAA,]

  Ret=RET
  print(match.call()[[1]])
  name1=match.call()[[1]]



  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=irfactor(TSRV,CSRV,Ret,FALSE,CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,IR=1,rpname=name1)



  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}



Ieq=function(TSWGT=1,CSWGT=1,RB1=5,RB2=5,RET,index,CSdesign){

  setwd("D:/R/GRP")
  minobs1=12
  minobs=60

  Expanding=0

  nopos=0.4##middle section->neutral zone
  MA=c(1,2,3)/6

  CS=CSNUM2 # assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=260
  statsd=260
  ##volupdate trigger
  Volband=0.1

  ##carry score



  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

  Ret=RET

  Eqindex=Eindex[rownames(Eindex)%in%rownames(fx),]

  Eqindex=Eqindex[,c("SPX","TSX","DAX","FTSE","NKY")]
  if(JGB=="out"){Eqindex=Eqindex[,c("SPX","TSX","DAX","FTSE")]}
  L=6

  RV=-Eqindex[(L+1):nrow(Eqindex),]/Eqindex[1:(nrow(Eqindex)-L),]
  RV1=RV[rownames(RV)>=rownames(index)[1],]
  L=1

  RV=-Eqindex[(L+1):nrow(Eqindex),]/Eqindex[1:(nrow(Eqindex)-L),]
  RV3=RV[rownames(RV)>=rownames(index)[1],]
  L=3

  RV=-Eqindex[(L+1):nrow(Eqindex),]/Eqindex[1:(nrow(Eqindex)-L),]
  RV6=RV[rownames(RV)>=rownames(index)[1],]
  # Eqindex=Eqindex[rownames(Eqindex)%in%rownames(index)]

  RV=RV1+RV3+RV6

  RV=RV[12:nrow(RV),]


  # MAM=matrix(rep(MA,ncol(Ret)),ncol=ncol(Ret))
  # for(i in length(MA):nrow(index)){
  #   RV[i,]=colSums(carry[(i-length(MA)+1):i,]*MAM)
  #
  # }
  # RV=RV[length(MA):nrow(index),]


  RVrank=RV[(minobs1):nrow(RV),]*0


  #
  # for(i in 1:(minobs-minobs1)) {
  #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # }#i
  #
  # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
  #
  #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
  #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
  # }#i
  #
  for(i in 1:(nrow(RV)-minobs1+1)) {
    RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  }#i





  truecount=round(rowSums(!is.na(RVrank))*CS)
  truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
  tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
  CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1

  # RV1=RV[(minobs1):nrow(RV),]
  # truecount=round(rowSums(!is.na(RV1))*CS)
  # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  # CSRVpos=CSRV*0
  # CSRVpos[CSRV[,]<=truecount]=-1
  # CSRVpos[CSRV1[,]<=truecount]=1



  ##Final CS signal(weighted)
  CSRV=CSRVpos
  CSRV[is.na(CSRV)]=0
  #translate to positions

  TSRV=RVrank*0

  TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
  TSRV[RVrank[,]<((1-nopos)/2)]=-1
  # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
  # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1
  # TSRV[RVrank[,]>0.95]=0
  # TSRV[RVrank[,]<0.05]=0

  # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
  # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1

  # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
  # down=rep(((1-nopos)/2),ncol(TSRV))
  #
  # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
  # TSRV[1,is.na(TSRV[1,])]=0
  # for(i in 2:nrow(RVrank)){
  #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
  #   TSRV[i,is.na(TSRV[i,])]=0
  # }
  #
  AAA=intersect(rownames(TSRV),rownames(CSRV))
  TSRV=TSRV[AAA,]
  CSRV=CSRV[AAA,]


  TSRV$mon=as.yearmon(rownames(TSRV))+1/12


  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*0
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RET

  print(match.call()[[1]])
  name1=match.call()[[1]]

  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=irfactor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0,IR=1,rpname=name1)

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}



IRV=function(TSWGT=1,CSWGT=1,RB1=5,RB2=5,RET,index,CSdesign){
  Ret=RET


  setwd("D:/R/GRP")
  minobs1=12
  minobs=60
  Expanding=0

  nopos=0.4##middle section->neutral zone
  MA=c(1,2,3)/6

  CS=CSNUM2# assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=260
  statsd=260
  ##volupdate trigger
  Volband=0.1

  ##carry score
  twoYR <- as.data.frame(read.csv("D:/R/GRP/bonds2yr.csv", row.names=1,header=TRUE))
  tenYR <- as.data.frame(read.csv("D:/R/GRP/bonds10yr.csv", row.names=1,header=TRUE))

  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

  Ret=RET
  if(JGB=="out"){index=index[,1:4]}
  Eqindex<- as.data.frame(read.csv("D:/R/GRP/ERR.csv", row.names=1,header=TRUE))
  Eqindex=Eqindex[,c("SPX","TSX","DAX","FTSE","NKY")]
  if(JGB=="out"){Eqindex=Eqindex[,c("SPX","TSX","DAX","FTSE")]}
  L=3

  Eqindex2=Eqindex


  RV=-(Eqindex2[(L+1):nrow(Eqindex2),]-Eqindex2[1:(nrow(Eqindex2)-L),])


  RV3=RV[rownames(RV)>=rownames(index)[1],]

  RV=RV3



  RVrank=RV[(minobs1):nrow(RV),]*0
  for(i in 1:(nrow(RV)-minobs1+1)) {
    RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  }#i
  RVrankTS=RVrank

  ry <- as.data.frame(read.csv("D:/R/GRP/realyield2.csv", row.names=1,header=TRUE))
  #cpi <- as.data.frame(read.csv("D:/R/GRP/cpistat.csv", row.names=1,header=TRUE))
  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

  Ret=RET
  obslen=2
  tenYR <- as.data.frame(read.csv("D:/R/GRP/bonds10yr.csv", row.names=1,header=TRUE))

  tenYR=tenYR[rownames(tenYR)%in%rownames(fx),]
  tenYR=tenYR[rownames(tenYR)%in%rownames(ry),1:4]

  RV=tenYR-ry
  RVrank=RV[(minobs1):nrow(RV),]*0
  for(i in 1:(nrow(RV)-minobs1+1)) {
    RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  }#i


  truecount=round(rowSums(!is.na(RVrank))*CS)
  truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
  tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
  CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1

  # RV1=RV[(minobs1):nrow(RV),]
  # truecount=round(rowSums(!is.na(RV1))*CS)
  # truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  # CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  # CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  # CSRVpos=CSRV*0
  # CSRVpos[CSRV[,]<=truecount]=-1
  # CSRVpos[CSRV1[,]<=truecount]=1
  # rownames(CSRVpos)=rownames(RV1)
  # # #

  ##Final CS signal(weighted)
  CSRV=CSRVpos
  CSRV[is.na(CSRV)]=0
  #translate to positions
  CSRVone=CSRV


  ry <- as.data.frame(read.csv("D:/R/GRP/realyield.csv", row.names=1,header=TRUE))
  #cpi <- as.data.frame(read.csv("D:/R/GRP/cpistat.csv", row.names=1,header=TRUE))
  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))

  Ret=RET
  obslen=2




  RV=ry[(obslen+1):nrow(ry),]-ry[1:(nrow(ry)-obslen),]


  RV1=RV[(minobs1):nrow(RV),]
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1
  rownames(CSRVpos)=rownames(RV1)
  # # # #

  ##Final CS signal(weighted)
  CSRV=CSRVpos
  CSRV[is.na(CSRV)]=0
  #translate to positions
  CSRVtwo=CSRV

  AA=intersect(rownames(CSRVone),rownames(CSRVtwo))

  CSRVone=CSRVone[AA,]
  CSRVtwo=CSRVtwo[AA,]

  CSRV=CSRVone+CSRVtwo*0.5
  TSRV=RVrankTS*0
  TSRV[RVrankTS[,]>(nopos+(1-nopos)/2)]=1
  TSRV[RVrankTS[,]<((1-nopos)/2)]=-1

  AA=intersect(rownames(CSRV),rownames(TSRV))
  TSRV=TSRV[AA,]
  CSRV=CSRV[AA,]

  # TSRVraw=RV[(minobs1):nrow(RV),]
  # TSRV=TSRVraw*0
  # TSRV[TSRVraw[,]>(0)]=1
  # TSRV[TSRVraw[,]<(0)]=-1


  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  if(JGB=="out"){Ret=Ret[,1:4]}

  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*0
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RET

  if(JGB=="out"){Ret=Ret[,1:4]}

  print(match.call()[[1]])
  name1=match.call()[[1]]
  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }

  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }

  functionoutput=irfactor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1)


  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}







XXM=function(TSWGT=1,CSWGT=1,RB1=5,RB2=5,RET,index,CSdesign="vol"){

  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  index=index[wday(rownames(index))==RB1,]

  minobs1=52
  minobs=260
  longlen=52
  shortlen=1
  Expanding=0

  nopos=0.4##middle section->neutral zone
  SDEV=12

  CS=CSNUM # assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=260
  statsd=260
  ##volupdate trigger
  Volband=0.1


  ##Magnitude
  Ret=RET
  Mag=index[(longlen+1):nrow(index),]
  obs=nrow(Mag)-1
  Mag=index[(1+longlen-shortlen):(1+longlen-shortlen+obs),]/index[(1):(1+obs),]-1

  rownames(Mag)=rownames(index)[(longlen+1):nrow(index)]

  RVrank=Mag[(minobs):nrow(Mag),]*0

  RV=Mag



  ##Reliability
  ret=index[2:nrow(index),]/index[1:(nrow(index)-1),]-1

  STDEV=as.data.frame(rollapplyr(ret,52,sd))*sqrt(52)
  rownames(STDEV)=rownames(index)[(52+1):nrow(index)]
  STDEV1=STDEV[rownames(STDEV)%in%rownames(Mag),]


  RV=(Mag)/STDEV1

  RVrank=RV[(minobs1):nrow(RV),]*0


  for(i in 1:(minobs-minobs1)) {
    RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  }#i

  for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {

    RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
    RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
  }#i

  # for(i in 1:(nrow(RV)-minobs1+1)) {
  #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # }#i




  # truecount=round(rowSums(!is.na(RVrank))*CS)
  # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
  # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
  # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
  # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
  # CSRVpos=CSRV*0
  # CSRVpos[CSRV[,]<=truecount]=-1
  # CSRVpos[CSRV1[,]<=truecount]=1

  RV1=(RV[(minobs1):nrow(RV),])
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1


  Relrank=RVrank
  CSRelpos=CSRVpos



  TS2=Relrank*0
  TS2[Relrank[,]>(nopos+(1-nopos)/2)]=1
  TS2[Relrank[,]<((1-nopos)/2)]=-1




  ####Final Position
  TSRVL=TS2
  CSRVL=CSRelpos



  fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  index=index[wday(rownames(index))==RB1,]

  Ret=RET



  STRV=-(index[2:nrow(index),]/index[1:(nrow(index)-1),]-1)


  RV=STRV[52:nrow(STRV),]

  RVrank=RV[(minobs1):nrow(RV),]*0



  # for(i in 1:(minobs-minobs1)) {
  #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # }#i
  #
  # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
  #
  #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
  #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
  # }#i

  for(i in 1:(nrow(RV)-minobs1+1)) {
    RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  }#i


  truecount=round(rowSums(!is.na(RVrank))*CS)
  truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
  tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
  CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1



  ##Final CS signal(weighted)
  CSRVS=CSRVpos
  CSRVS[is.na(CSRVS)]=0
  #translate to positions

  TS2=RVrank*0
  TS2[RVrank[,]>(nopos+(1-nopos)/2)]=1
  TS2[RVrank[,]<((1-nopos)/2)]=-1

  TSRVS=TS2



  TSRV=TSRVS[rownames(TSRVL),]*0.5+TSRVL*1
  CSRV=CSRVS[rownames(CSRVL),]*0.5+CSRVL*1



  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RET


  functionoutput=factor(TSRV,CSRV,Ret,"week",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=1,rpname=name1)

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

ESTratio=function(TSWGT=1,CSWGT=1,RB1=3,RB2=3,RET,index,CSdesign){

  ##RV

  GV<-as.data.frame(read.csv("D:/R/GRP/growthvalue.csv", row.names=1,header=TRUE))

  minobs1=12
  minobs=60

  Expanding=0
  weeklyTS=1
  nopos=0.40##middle section->neutral zone

  per=3
  CS=CSNUM # assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=12
  assetsd=12
  statsd=12
  ##volupdate trigger
  Volband=0.1

  ##carry score
  Ret=RET

  sent=GV[(1+per):nrow(GV),]/GV[(1):(nrow(GV)-per),]-1
  sent1=sent[,1:14]-sent[,15:28]

  # sent2=GV[(2):nrow(GV),]/GV[(1):(nrow(GV)-1),]-1
  # sent2=sent2[,1:14]-sent2[,15:28]
  # sentstd=rollapplyr(sent2,3,sd)*sqrt(12)
  # rownames(sentstd)=rownames(sent2)[3:nrow(sent2)]

  RV=sent1-rowMeans(sent1,na.rm=TRUE)

  RVrank=RV[(minobs1):nrow(RV),]*0


  # for(i in 1:(minobs-minobs1)) {
  #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # }#i
  #
  # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
  #
  #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
  #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
  # }#i

  for(i in 1:(nrow(RV)-minobs1+1)) {
    RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  }#i



  # truecount=round(rowSums(!is.na(RVrank))*CS)
  # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
  # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
  # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
  # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
  # CSRVpos=CSRV*0
  # CSRVpos[CSRV[,]<=truecount]=-1
  # CSRVpos[CSRV1[,]<=truecount]=1
  #


  RV1=RV[(minobs1):nrow(RV),]
  truecount=round(ncol(RV1)*CS)
  CSRVpos=CSRV*0
  for (i in truecount:1){

    CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
    CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))

    CSRVpos[CSRV[,]==i]=-(truecount-i+1)
    CSRVpos[CSRV1[,]==i]=(truecount-i+1)
  }
  #


  ##Final CS signal(weighted)
  CSRV=CSRVpos
  CSRV[is.na(CSRV)]=0
  #translate to positions


  TSRV=RVrank*0
  TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
  TSRV[RVrank[,]<((1-nopos)/2)]=-1
  # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
  # down=rep(((1-nopos)/2),ncol(TSRV))
  #
  # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
  # TSRV[1,is.na(TSRV[1,])]=0
  # for(i in 2:nrow(RVrank)){
  #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
  #   TSRV[i,is.na(TSRV[i,])]=0
  # }
  #

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RET
  print(match.call()[[1]])
  name1=match.call()[[1]]

  if(write==1){
    setwd("D:/R/GRP/live")

    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){

    setwd("D:/R/GRP/live")
    ##########
    TSRVnew=TSRV
    CSRVnew=CSRV
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRVnew[rownames(TSRVlive),]=TSRVlive
    CSRVnew[rownames(CSRVlive),]=CSRVlive

    if (updatedaily==1){
      write.csv(TSRVnew,paste(name1,"TS.csv",sep=""))
      write.csv(CSRVnew,paste(name1,"CS.csv",sep=""))
      ##########
    }
    setwd("D:/R/GRP")
  }
  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,0,rpname=name1)

  # output=functionoutput[[2]]
  # write.csv(output,"stat.csv")
  E_ST_TS=functionoutput[[1]]
  E_ST_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}
CCA1=function(TSWGT=1,CSWGT=1,RB1=5,RB2=5,RET,index,CSdesign){

  ##RV
  setwd("D:/R/GRP")
  carry <- as.data.frame(read.csv("D:/R/GRP/carry-com.csv", row.names=1,header=TRUE))
  # fut1price <- as.data.frame(read.csv("D:/R/GRP/fut1price-com.csv", row.names=1,header=TRUE))
  # fut2price <- as.data.frame(read.csv("D:/R/GRP/fut2price-com.csv", row.names=1,header=TRUE))
  # expday <- as.data.frame(read.csv("D:/R/GRP/days-com.csv", row.names=1,header=TRUE))

  minobs1=12
  minobs=60

  Expanding=0

  nopos=0.4##middle section->neutral zone
  MA=c(1,2,3)/6

  CS=0.3 # assets to long and short

  #Factor Portfolio construction
  Assetvol=0.02
  Strategyvol=0.02
  factorvol=0.02
  factorsd=260
  assetsd=260
  statsd=260
  ##volupdate trigger
  Volband=0.1

  ##carry score


  # carry=(fut1price-fut2price)/fut2price/expday
  # fx<- as.data.frame(read.csv("D:/R/GRP/fx.csv", row.names=1,header=TRUE))
  # carry=carry[rownames(carry)%in%rownames(fx),]
  #carry=carry[wday(rownames(carry))==3,]
  Ret=RET




  RV=carry[12:nrow(carry),]-rowMeans(carry[12:nrow(carry),])
  # MAM=matrix(rep(MA,ncol(Ret)),ncol=ncol(Ret))
  # for(i in length(MA):nrow(index)){
  #   RV[i,]=colSums(carry[(i-length(MA)+1):i,]*MAM)
  #
  # }
  # RV=RV[length(MA):nrow(index),]


  RVrank=RV[(minobs1):nrow(RV),]*0



  # for(i in 1:(minobs-minobs1)) {
  #   RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
  #   RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  # }#i
  #
  # for(i in (minobs-minobs1+1):(nrow(RV)-minobs1+1)) {
  #
  #   RVrank[i,]=apply(RV[(i-(minobs-minobs1)):(minobs1+i-1),],2,rank,na.last="keep")[minobs,]/((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))
  #   RVrank[i,((minobs)-colSums(is.na(RV[(i-(minobs-minobs1)):(minobs1+i-1),])))<(minobs1)]=NA
  # }#i

  for(i in 1:(nrow(RV)-minobs1+1)) {
    RVrank[i,]=apply(RV[1:(minobs1+i-1),],2,rank,na.last="keep")[i+minobs1-1,]/((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))
    RVrank[i,((i+minobs1-1)-colSums(is.na(RV[1:(i+minobs1-1),])))<(minobs1)]=NA
  }#i


  # truecount=round(rowSums(!is.na(RVrank))*CS)
  # truecount=matrix(rep(truecount,ncol(RVrank)),nrow=nrow(RVrank))
  # tiebreaker=as.data.frame(rbind(matrix(0,4,ncol(index)),as.matrix(rollapplyr(RVrank,5,mean)))*0.0000001)
  # CSRV=as.data.frame(t(as.data.frame(apply(RVrank+tiebreaker,1,rank,ties.method="first",na.last="keep"))))
  # CSRV1=as.data.frame(t(as.data.frame(apply(-RVrank-tiebreaker,1,rank,ties.method="last",na.last="keep"))))
  # CSRVpos=CSRV*0
  # CSRVpos[CSRV[,]<=truecount]=-1
  # CSRVpos[CSRV1[,]<=truecount]=1

  RV1=RV[(minobs1):nrow(RV),]
  truecount=round(rowSums(!is.na(RV1))*CS)
  truecount=matrix(rep(truecount,ncol(RV1)),nrow=nrow(RV1))
  CSRV=as.data.frame(t(as.data.frame(apply(RV1,1,rank,ties.method="first",na.last="keep"))))
  CSRV1=as.data.frame(t(as.data.frame(apply(-RV1,1,rank,ties.method="last",na.last="keep"))))
  CSRVpos=CSRV*0
  CSRVpos[CSRV[,]<=truecount]=-1
  CSRVpos[CSRV1[,]<=truecount]=1



  ##Final CS signal(weighted)
  CSRV=CSRVpos
  CSRV[is.na(CSRV)]=0
  #translate to positions

  TSRV=RVrank*0

  TSRV[RVrank[,]>(nopos+(1-nopos)/2)]=1
  TSRV[RVrank[,]<((1-nopos)/2)]=-1
  # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
  # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1
  # TSRV[RVrank[,]>0.95]=0
  # TSRV[RVrank[,]<0.05]=0

  # TSRV[RVrank[,]>(nopos+(1-nopos)/2)&RV[(minobs1):nrow(RV),]>0]=1
  # TSRV[RVrank[,]<((1-nopos)/2)&RV[(minobs1):nrow(RV),]<0]=-1

  # up=rep((nopos+(1-nopos)/2),ncol(TSRV))
  # down=rep(((1-nopos)/2),ncol(TSRV))
  #
  # TSRV[1,]=(RVrank[1,]>=(up))*1+-1*(RVrank[1,]<=(down))
  # TSRV[1,is.na(TSRV[1,])]=0
  # for(i in 2:nrow(RVrank)){
  #   TSRV[i,]=(RVrank[i,]>=(up-(TSRV[i-1,]>0)*0.025))*1+(RVrank[i,]<=(down+(TSRV[i-1,]<0)*0.025))*-1
  #   TSRV[i,is.na(TSRV[i,])]=0
  # }
  #

  TSRV$mon=as.yearmon(rownames(TSRV))+1/12
  start=max(TSRV$mon[1],as.yearmon(rownames(Ret)[1]))
  TSRVtemp=Ret[as.yearmon(rownames(Ret))>=start,]*NA
  CSRVtemp=TSRVtemp
  for (ss in 1:nrow(TSRV)){
    TSRVtemp[rownames(TSRVtemp)>=rownames(TSRV)[ss],1:ncol(Ret)]=TSRV[ss,1:ncol(Ret)]
    CSRVtemp[rownames(CSRVtemp)>=rownames(CSRV)[ss],1:ncol(Ret)]=CSRV[ss,1:ncol(Ret)]
  }
  TSRV=TSRVtemp
  CSRV=CSRVtemp
  Ret=RET
  if(write==1){
    setwd("D:/R/GRP/live")
    print(match.call()[[1]])
    name1=match.call()[[1]]
    write.csv(TSRV,paste(name1,"TS.csv",sep=""))
    write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    setwd("D:/R/GRP")
  }
  if(test!=1){
    print(match.call()[[1]])
    name1=match.call()[[1]]
    setwd("D:/R/GRP/live")
    TSRVlive=as.data.frame(read.csv(paste(name1,"TS.csv",sep=""), row.names=1,header=TRUE))
    CSRVlive=as.data.frame(read.csv(paste(name1,"CS.csv",sep=""), row.names=1,header=TRUE))
    TSRV[rownames(TSRVlive),]=TSRVlive
    CSRV[rownames(CSRVlive),]=CSRVlive
    if (updatedaily==1){
      write.csv(TSRV,paste(name1,"TS.csv",sep=""))
      write.csv(CSRV,paste(name1,"CS.csv",sep=""))
    }
    setwd("D:/R/GRP")
  }

  functionoutput=factor(TSRV,CSRV,Ret,"month",CSLS=CSdesign,TSWGT,CSWGT,0,CSweek=0)
  TStest=functionoutput[[1]]
  CStest=functionoutput[[2]]

  write.csv(  RAW(TStest,Ret),"TS.csv")
  write.csv(  RAW(CStest,Ret),"CS.csv")


  C_CA_TS=functionoutput[[1]]
  C_CA_CS=functionoutput[[2]]

  result=list(functionoutput[[1]],functionoutput[[2]],functionoutput[[3]],functionoutput[[4]])

  return(result)
}

